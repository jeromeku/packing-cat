{
  "version": "1",
  "pip_version": "23.2.1",
  "install": [
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/2f/e6/9f5100305e53f2722c161fafa6cea97d3631f3afa173db95efb8501ad9f4/black-23.9.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=031e8c69f3d3b09e1aa471a926a1eeb0b9071f80b17689a655f7885ac9325a6f",
          "hashes": {
            "sha256": "031e8c69f3d3b09e1aa471a926a1eeb0b9071f80b17689a655f7885ac9325a6f"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "black",
        "version": "23.9.1",
        "summary": "The uncompromising code formatter.",
        "description": "[![Black Logo](https://raw.githubusercontent.com/psf/black/main/docs/_static/logo2-readme.png)](https://black.readthedocs.io/en/stable/)\n\n<h2 align=\"center\">The Uncompromising Code Formatter</h2>\n\n<p align=\"center\">\n<a href=\"https://github.com/psf/black/actions\"><img alt=\"Actions Status\" src=\"https://github.com/psf/black/workflows/Test/badge.svg\"></a>\n<a href=\"https://black.readthedocs.io/en/stable/?badge=stable\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/black/badge/?version=stable\"></a>\n<a href=\"https://coveralls.io/github/psf/black?branch=main\"><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/psf/black/badge.svg?branch=main\"></a>\n<a href=\"https://github.com/psf/black/blob/main/LICENSE\"><img alt=\"License: MIT\" src=\"https://black.readthedocs.io/en/stable/_static/license.svg\"></a>\n<a href=\"https://pypi.org/project/black/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/black\"></a>\n<a href=\"https://pepy.tech/project/black\"><img alt=\"Downloads\" src=\"https://static.pepy.tech/badge/black\"></a>\n<a href=\"https://anaconda.org/conda-forge/black/\"><img alt=\"conda-forge\" src=\"https://img.shields.io/conda/dn/conda-forge/black.svg?label=conda-forge\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n</p>\n\n> “Any color you like.”\n\n_Black_ is the uncompromising Python code formatter. By using it, you agree to cede\ncontrol over minutiae of hand-formatting. In return, _Black_ gives you speed,\ndeterminism, and freedom from `pycodestyle` nagging about formatting. You will save time\nand mental energy for more important matters.\n\nBlackened code looks the same regardless of the project you're reading. Formatting\nbecomes transparent after a while and you can focus on the content instead.\n\n_Black_ makes code review faster by producing the smallest diffs possible.\n\nTry it out now using the [Black Playground](https://black.vercel.app). Watch the\n[PyCon 2019 talk](https://youtu.be/esZLCuWs_2Y) to learn more.\n\n---\n\n**[Read the documentation on ReadTheDocs!](https://black.readthedocs.io/en/stable)**\n\n---\n\n## Installation and usage\n\n### Installation\n\n_Black_ can be installed by running `pip install black`. It requires Python 3.7+ to run.\nIf you want to format Jupyter Notebooks, install with `pip install \"black[jupyter]\"`.\n\nIf you can't wait for the latest _hotness_ and want to install from GitHub, use:\n\n`pip install git+https://github.com/psf/black`\n\n### Usage\n\nTo get started right away with sensible defaults:\n\n```sh\nblack {source_file_or_directory}\n```\n\nYou can run _Black_ as a package if running it as a script doesn't work:\n\n```sh\npython -m black {source_file_or_directory}\n```\n\nFurther information can be found in our docs:\n\n- [Usage and Configuration](https://black.readthedocs.io/en/stable/usage_and_configuration/index.html)\n\n_Black_ is already [successfully used](https://github.com/psf/black#used-by) by many\nprojects, small and big. _Black_ has a comprehensive test suite, with efficient parallel\ntests, and our own auto formatting and parallel Continuous Integration runner. Now that\nwe have become stable, you should not expect large formatting changes in the future.\nStylistic changes will mostly be responses to bug reports and support for new Python\nsyntax. For more information please refer to the\n[The Black Code Style](https://black.readthedocs.io/en/stable/the_black_code_style/index.html).\n\nAlso, as a safety measure which slows down processing, _Black_ will check that the\nreformatted code still produces a valid AST that is effectively equivalent to the\noriginal (see the\n[Pragmatism](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#ast-before-and-after-formatting)\nsection for details). If you're feeling confident, use `--fast`.\n\n## The _Black_ code style\n\n_Black_ is a PEP 8 compliant opinionated formatter. _Black_ reformats entire files in\nplace. Style configuration options are deliberately limited and rarely added. It doesn't\ntake previous formatting into account (see\n[Pragmatism](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#pragmatism)\nfor exceptions).\n\nOur documentation covers the current _Black_ code style, but planned changes to it are\nalso documented. They're both worth taking a look:\n\n- [The _Black_ Code Style: Current style](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html)\n- [The _Black_ Code Style: Future style](https://black.readthedocs.io/en/stable/the_black_code_style/future_style.html)\n\nChanges to the _Black_ code style are bound by the Stability Policy:\n\n- [The _Black_ Code Style: Stability Policy](https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy)\n\nPlease refer to this document before submitting an issue. What seems like a bug might be\nintended behaviour.\n\n### Pragmatism\n\nEarly versions of _Black_ used to be absolutist in some respects. They took after its\ninitial author. This was fine at the time as it made the implementation simpler and\nthere were not many users anyway. Not many edge cases were reported. As a mature tool,\n_Black_ does make some exceptions to rules it otherwise holds.\n\n- [The _Black_ code style: Pragmatism](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#pragmatism)\n\nPlease refer to this document before submitting an issue just like with the document\nabove. What seems like a bug might be intended behaviour.\n\n## Configuration\n\n_Black_ is able to read project-specific default values for its command line options\nfrom a `pyproject.toml` file. This is especially useful for specifying custom\n`--include` and `--exclude`/`--force-exclude`/`--extend-exclude` patterns for your\nproject.\n\nYou can find more details in our documentation:\n\n- [The basics: Configuration via a file](https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file)\n\nAnd if you're looking for more general configuration documentation:\n\n- [Usage and Configuration](https://black.readthedocs.io/en/stable/usage_and_configuration/index.html)\n\n**Pro-tip**: If you're asking yourself \"Do I need to configure anything?\" the answer is\n\"No\". _Black_ is all about sensible defaults. Applying those defaults will have your\ncode in compliance with many other _Black_ formatted projects.\n\n## Used by\n\nThe following notable open-source projects trust _Black_ with enforcing a consistent\ncode style: pytest, tox, Pyramid, Django, Django Channels, Hypothesis, attrs,\nSQLAlchemy, Poetry, PyPA applications (Warehouse, Bandersnatch, Pipenv, virtualenv),\npandas, Pillow, Twisted, LocalStack, every Datadog Agent Integration, Home Assistant,\nZulip, Kedro, OpenOA, FLORIS, ORBIT, WOMBAT, and many more.\n\nThe following organizations use _Black_: Facebook, Dropbox, KeepTruckin, Lyft, Mozilla,\nQuora, Duolingo, QuantumBlack, Tesla, Archer Aviation.\n\nAre we missing anyone? Let us know.\n\n## Testimonials\n\n**Mike Bayer**, [author of `SQLAlchemy`](https://www.sqlalchemy.org/):\n\n> I can't think of any single tool in my entire programming career that has given me a\n> bigger productivity increase by its introduction. I can now do refactorings in about\n> 1% of the keystrokes that it would have taken me previously when we had no way for\n> code to format itself.\n\n**Dusty Phillips**,\n[writer](https://smile.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=dusty+phillips):\n\n> _Black_ is opinionated so you don't have to be.\n\n**Hynek Schlawack**, [creator of `attrs`](https://www.attrs.org/), core developer of\nTwisted and CPython:\n\n> An auto-formatter that doesn't suck is all I want for Xmas!\n\n**Carl Meyer**, [Django](https://www.djangoproject.com/) core developer:\n\n> At least the name is good.\n\n**Kenneth Reitz**, creator of [`requests`](https://requests.readthedocs.io/en/latest/)\nand [`pipenv`](https://readthedocs.org/projects/pipenv/):\n\n> This vastly improves the formatting of our code. Thanks a ton!\n\n## Show your style\n\nUse the badge in your project's README.md:\n\n```md\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n```\n\nUsing the badge in README.rst:\n\n```\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n```\n\nLooks like this:\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## License\n\nMIT\n\n## Contributing\n\nWelcome! Happy to see you willing to make the project better. You can get started by\nreading this:\n\n- [Contributing: The basics](https://black.readthedocs.io/en/latest/contributing/the_basics.html)\n\nYou can also take a look at the rest of the contributing docs or talk with the\ndevelopers:\n\n- [Contributing documentation](https://black.readthedocs.io/en/latest/contributing/index.html)\n- [Chat on Discord](https://discord.gg/RtVdv86PrH)\n\n## Change log\n\nThe log has become rather long. It moved to its own file.\n\nSee [CHANGES](https://black.readthedocs.io/en/latest/change_log.html).\n\n## Authors\n\nThe author list is quite long nowadays, so it lives in its own file.\n\nSee [AUTHORS.md](./AUTHORS.md)\n\n## Code of Conduct\n\nEveryone participating in the _Black_ project, and in particular in the issue tracker,\npull requests, and social media activity, is expected to treat other people with respect\nand more generally to follow the guidelines articulated in the\n[Python Community Code of Conduct](https://www.python.org/psf/codeofconduct/).\n\nAt the same time, humor is encouraged. In fact, basic familiarity with Monty Python's\nFlying Circus is expected. We are not savages.\n\nAnd if you _really_ need to slap somebody, do it with a fish while dancing.\n# Change Log\n\n## Unreleased\n\n### Highlights\n\n<!-- Include any especially major or disruptive changes here -->\n\n### Stable style\n\n<!-- Changes that affect Black's stable style -->\n\n### Preview style\n\n<!-- Changes that affect Black's preview style -->\n\n### Configuration\n\n<!-- Changes to how Black can be configured -->\n\n### Packaging\n\n<!-- Changes to how Black is packaged, such as dependency requirements -->\n\n### Parser\n\n<!-- Changes to the parser or to version autodetection -->\n\n### Performance\n\n<!-- Changes that improve Black's performance. -->\n\n### Output\n\n<!-- Changes to Black's terminal output and error messages -->\n\n### _Blackd_\n\n<!-- Changes to blackd -->\n\n### Integrations\n\n<!-- For example, Docker, GitHub Actions, pre-commit, editors -->\n\n### Documentation\n\n<!-- Major changes to documentation and policies. Small docs changes\n     don't need a changelog entry. -->\n\n## 23.9.1\n\nDue to various issues, the previous release (23.9.0) did not include compiled mypyc\nwheels, which make Black significantly faster. These issues have now been fixed, and\nthis release should come with compiled wheels once again.\n\nThere will be no wheels for Python 3.12 due to a bug in mypyc. We will provide 3.12\nwheels in a future release as soon as the mypyc bug is fixed.\n\n### Packaging\n\n- Upgrade to mypy 1.5.1 (#3864)\n\n### Performance\n\n- Store raw tuples instead of NamedTuples in Black's cache, improving performance and\n  decreasing the size of the cache (#3877)\n\n## 23.9.0\n\n### Preview style\n\n- More concise formatting for dummy implementations (#3796)\n- In stub files, add a blank line between a statement with a body (e.g an\n  `if sys.version_info > (3, x):`) and a function definition on the same level (#3862)\n- Fix a bug whereby spaces were removed from walrus operators within subscript(#3823)\n\n### Configuration\n\n- Black now applies exclusion and ignore logic before resolving symlinks (#3846)\n\n### Performance\n\n- Avoid importing `IPython` if notebook cells do not contain magics (#3782)\n- Improve caching by comparing file hashes as fallback for mtime and size (#3821)\n\n### _Blackd_\n\n- Fix an issue in `blackd` with single character input (#3558)\n\n### Integrations\n\n- Black now has an\n  [official pre-commit mirror](https://github.com/psf/black-pre-commit-mirror). Swapping\n  `https://github.com/psf/black` to `https://github.com/psf/black-pre-commit-mirror` in\n  your `.pre-commit-config.yaml` will make Black about 2x faster (#3828)\n- The `.black.env` folder specified by `ENV_PATH` will now be removed on the completion\n  of the GitHub Action (#3759)\n\n## 23.7.0\n\n### Highlights\n\n- Runtime support for Python 3.7 has been removed. Formatting 3.7 code will still be\n  supported until further notice (#3765)\n\n### Stable style\n\n- Fix a bug where an illegal trailing comma was added to return type annotations using\n  PEP 604 unions (#3735)\n- Fix several bugs and crashes where comments in stub files were removed or mishandled\n  under some circumstances (#3745)\n- Fix a crash with multi-line magic comments like `type: ignore` within parentheses\n  (#3740)\n- Fix error in AST validation when _Black_ removes trailing whitespace in a type comment\n  (#3773)\n\n### Preview style\n\n- Implicitly concatenated strings used as function args are no longer wrapped inside\n  parentheses (#3640)\n- Remove blank lines between a class definition and its docstring (#3692)\n\n### Configuration\n\n- The `--workers` argument to _Black_ can now be specified via the `BLACK_NUM_WORKERS`\n  environment variable (#3743)\n- `.pytest_cache`, `.ruff_cache` and `.vscode` are now excluded by default (#3691)\n- Fix _Black_ not honouring `pyproject.toml` settings when running `--stdin-filename`\n  and the `pyproject.toml` found isn't in the current working directory (#3719)\n- _Black_ will now error if `exclude` and `extend-exclude` have invalid data types in\n  `pyproject.toml`, instead of silently doing the wrong thing (#3764)\n\n### Packaging\n\n- Upgrade mypyc from 0.991 to 1.3 (#3697)\n- Remove patching of Click that mitigated errors on Python 3.6 with `LANG=C` (#3768)\n\n### Parser\n\n- Add support for the new PEP 695 syntax in Python 3.12 (#3703)\n\n### Performance\n\n- Speed up _Black_ significantly when the cache is full (#3751)\n- Avoid importing `IPython` in a case where we wouldn't need it (#3748)\n\n### Output\n\n- Use aware UTC datetimes internally, avoids deprecation warning on Python 3.12 (#3728)\n- Change verbose logging to exactly mirror _Black_'s logic for source discovery (#3749)\n\n### _Blackd_\n\n- The `blackd` argument parser now shows the default values for options in their help\n  text (#3712)\n\n### Integrations\n\n- Black is now tested with\n  [`PYTHONWARNDEFAULTENCODING = 1`](https://docs.python.org/3/library/io.html#io-encoding-warning)\n  (#3763)\n- Update GitHub Action to display black output in the job summary (#3688)\n\n### Documentation\n\n- Add a CITATION.cff file to the root of the repository, containing metadata on how to\n  cite this software (#3723)\n- Update the _classes_ and _exceptions_ documentation in Developer reference to match\n  the latest code base (#3755)\n\n## 23.3.0\n\n### Highlights\n\nThis release fixes a longstanding confusing behavior in Black's GitHub action, where the\nversion of the action did not determine the version of Black being run (issue #3382). In\naddition, there is a small bug fix around imports and a number of improvements to the\npreview style.\n\nPlease try out the\n[preview style](https://black.readthedocs.io/en/stable/the_black_code_style/future_style.html#preview-style)\nwith `black --preview` and tell us your feedback. All changes in the preview style are\nexpected to become part of Black's stable style in January 2024.\n\n### Stable style\n\n- Import lines with `# fmt: skip` and `# fmt: off` no longer have an extra blank line\n  added when they are right after another import line (#3610)\n\n### Preview style\n\n- Add trailing commas to collection literals even if there's a comment after the last\n  entry (#3393)\n- `async def`, `async for`, and `async with` statements are now formatted consistently\n  compared to their non-async version. (#3609)\n- `with` statements that contain two context managers will be consistently wrapped in\n  parentheses (#3589)\n- Let string splitters respect [East Asian Width](https://www.unicode.org/reports/tr11/)\n  (#3445)\n- Now long string literals can be split after East Asian commas and periods (`、` U+3001\n  IDEOGRAPHIC COMMA, `。` U+3002 IDEOGRAPHIC FULL STOP, & `，` U+FF0C FULLWIDTH COMMA)\n  besides before spaces (#3445)\n- For stubs, enforce one blank line after a nested class with a body other than just\n  `...` (#3564)\n- Improve handling of multiline strings by changing line split behavior (#1879)\n\n### Parser\n\n- Added support for formatting files with invalid type comments (#3594)\n\n### Integrations\n\n- Update GitHub Action to use the version of Black equivalent to action's version if\n  version input is not specified (#3543)\n- Fix missing Python binary path in autoload script for vim (#3508)\n\n### Documentation\n\n- Document that only the most recent release is supported for security issues;\n  vulnerabilities should be reported through Tidelift (#3612)\n\n## 23.1.0\n\n### Highlights\n\nThis is the first release of 2023, and following our\n[stability policy](https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy),\nit comes with a number of improvements to our stable style, including improvements to\nempty line handling, removal of redundant parentheses in several contexts, and output\nthat highlights implicitly concatenated strings better.\n\nThere are also many changes to the preview style; try out `black --preview` and give us\nfeedback to help us set the stable style for next year.\n\nIn addition to style changes, Black now automatically infers the supported Python\nversions from your `pyproject.toml` file, removing the need to set Black's target\nversions separately.\n\n### Stable style\n\n<!-- Changes that affect Black's stable style -->\n\n- Introduce the 2023 stable style, which incorporates most aspects of last year's\n  preview style (#3418). Specific changes:\n  - Enforce empty lines before classes and functions with sticky leading comments\n    (#3302) (22.12.0)\n  - Reformat empty and whitespace-only files as either an empty file (if no newline is\n    present) or as a single newline character (if a newline is present) (#3348)\n    (22.12.0)\n  - Implicitly concatenated strings used as function args are now wrapped inside\n    parentheses (#3307) (22.12.0)\n  - Correctly handle trailing commas that are inside a line's leading non-nested parens\n    (#3370) (22.12.0)\n  - `--skip-string-normalization` / `-S` now prevents docstring prefixes from being\n    normalized as expected (#3168) (since 22.8.0)\n  - When using `--skip-magic-trailing-comma` or `-C`, trailing commas are stripped from\n    subscript expressions with more than 1 element (#3209) (22.8.0)\n  - Implicitly concatenated strings inside a list, set, or tuple are now wrapped inside\n    parentheses (#3162) (22.8.0)\n  - Fix a string merging/split issue when a comment is present in the middle of\n    implicitly concatenated strings on its own line (#3227) (22.8.0)\n  - Docstring quotes are no longer moved if it would violate the line length limit\n    (#3044, #3430) (22.6.0)\n  - Parentheses around return annotations are now managed (#2990) (22.6.0)\n  - Remove unnecessary parentheses around awaited objects (#2991) (22.6.0)\n  - Remove unnecessary parentheses in `with` statements (#2926) (22.6.0)\n  - Remove trailing newlines after code block open (#3035) (22.6.0)\n  - Code cell separators `#%%` are now standardised to `# %%` (#2919) (22.3.0)\n  - Remove unnecessary parentheses from `except` statements (#2939) (22.3.0)\n  - Remove unnecessary parentheses from tuple unpacking in `for` loops (#2945) (22.3.0)\n  - Avoid magic-trailing-comma in single-element subscripts (#2942) (22.3.0)\n- Fix a crash when a colon line is marked between `# fmt: off` and `# fmt: on` (#3439)\n\n### Preview style\n\n<!-- Changes that affect Black's preview style -->\n\n- Format hex codes in unicode escape sequences in string literals (#2916)\n- Add parentheses around `if`-`else` expressions (#2278)\n- Improve performance on large expressions that contain many strings (#3467)\n- Fix a crash in preview style with assert + parenthesized string (#3415)\n- Fix crashes in preview style with walrus operators used in function return annotations\n  and except clauses (#3423)\n- Fix a crash in preview advanced string processing where mixed implicitly concatenated\n  regular and f-strings start with an empty span (#3463)\n- Fix a crash in preview advanced string processing where a standalone comment is placed\n  before a dict's value (#3469)\n- Fix an issue where extra empty lines are added when a decorator has `# fmt: skip`\n  applied or there is a standalone comment between decorators (#3470)\n- Do not put the closing quotes in a docstring on a separate line, even if the line is\n  too long (#3430)\n- Long values in dict literals are now wrapped in parentheses; correspondingly\n  unnecessary parentheses around short values in dict literals are now removed; long\n  string lambda values are now wrapped in parentheses (#3440)\n- Fix two crashes in preview style involving edge cases with docstrings (#3451)\n- Exclude string type annotations from improved string processing; fix crash when the\n  return type annotation is stringified and spans across multiple lines (#3462)\n- Wrap multiple context managers in parentheses when targeting Python 3.9+ (#3489)\n- Fix several crashes in preview style with walrus operators used in `with` statements\n  or tuples (#3473)\n- Fix an invalid quote escaping bug in f-string expressions where it produced invalid\n  code. Implicitly concatenated f-strings with different quotes can now be merged or\n  quote-normalized by changing the quotes used in expressions. (#3509)\n- Fix crash on `await (yield)` when Black is compiled with mypyc (#3533)\n\n### Configuration\n\n<!-- Changes to how Black can be configured -->\n\n- Black now tries to infer its `--target-version` from the project metadata specified in\n  `pyproject.toml` (#3219)\n\n### Packaging\n\n<!-- Changes to how Black is packaged, such as dependency requirements -->\n\n- Upgrade mypyc from `0.971` to `0.991` so mypycified _Black_ can be built on armv7\n  (#3380)\n  - This also fixes some crashes while using compiled Black with a debug build of\n    CPython\n- Drop specific support for the `tomli` requirement on 3.11 alpha releases, working\n  around a bug that would cause the requirement not to be installed on any non-final\n  Python releases (#3448)\n- Black now depends on `packaging` version `22.0` or later. This is required for new\n  functionality that needs to parse part of the project metadata (#3219)\n\n### Output\n\n<!-- Changes to Black's terminal output and error messages -->\n\n- Calling `black --help` multiple times will return the same help contents each time\n  (#3516)\n- Verbose logging now shows the values of `pyproject.toml` configuration variables\n  (#3392)\n- Fix false symlink detection messages in verbose output due to using an incorrect\n  relative path to the project root (#3385)\n\n### Integrations\n\n<!-- For example, Docker, GitHub Actions, pre-commit, editors -->\n\n- Move 3.11 CI to normal flow now that all dependencies support 3.11 (#3446)\n- Docker: Add new `latest_prerelease` tag automation to follow latest black alpha\n  release on docker images (#3465)\n\n### Documentation\n\n<!-- Major changes to documentation and policies. Small docs changes\n     don't need a changelog entry. -->\n\n- Expand `vim-plug` installation instructions to offer more explicit options (#3468)\n\n## 22.12.0\n\n### Preview style\n\n<!-- Changes that affect Black's preview style -->\n\n- Enforce empty lines before classes and functions with sticky leading comments (#3302)\n- Reformat empty and whitespace-only files as either an empty file (if no newline is\n  present) or as a single newline character (if a newline is present) (#3348)\n- Implicitly concatenated strings used as function args are now wrapped inside\n  parentheses (#3307)\n- For assignment statements, prefer splitting the right hand side if the left hand side\n  fits on a single line (#3368)\n- Correctly handle trailing commas that are inside a line's leading non-nested parens\n  (#3370)\n\n### Configuration\n\n<!-- Changes to how Black can be configured -->\n\n- Fix incorrectly applied `.gitignore` rules by considering the `.gitignore` location\n  and the relative path to the target file (#3338)\n- Fix incorrectly ignoring `.gitignore` presence when more than one source directory is\n  specified (#3336)\n\n### Parser\n\n<!-- Changes to the parser or to version autodetection -->\n\n- Parsing support has been added for walruses inside generator expression that are\n  passed as function args (for example,\n  `any(match := my_re.match(text) for text in texts)`) (#3327).\n\n### Integrations\n\n<!-- For example, Docker, GitHub Actions, pre-commit, editors -->\n\n- Vim plugin: Optionally allow using the system installation of Black via\n  `let g:black_use_virtualenv = 0`(#3309)\n\n## 22.10.0\n\n### Highlights\n\n- Runtime support for Python 3.6 has been removed. Formatting 3.6 code will still be\n  supported until further notice.\n\n### Stable style\n\n- Fix a crash when `# fmt: on` is used on a different block level than `# fmt: off`\n  (#3281)\n\n### Preview style\n\n- Fix a crash when formatting some dicts with parenthesis-wrapped long string keys\n  (#3262)\n\n### Configuration\n\n- `.ipynb_checkpoints` directories are now excluded by default (#3293)\n- Add `--skip-source-first-line` / `-x` option to ignore the first line of source code\n  while formatting (#3299)\n\n### Packaging\n\n- Executables made with PyInstaller will no longer crash when formatting several files\n  at once on macOS. Native x86-64 executables for macOS are available once again.\n  (#3275)\n- Hatchling is now used as the build backend. This will not have any effect for users\n  who install Black with its wheels from PyPI. (#3233)\n- Faster compiled wheels are now available for CPython 3.11 (#3276)\n\n### _Blackd_\n\n- Windows style (CRLF) newlines will be preserved (#3257).\n\n### Integrations\n\n- Vim plugin: add flag (`g:black_preview`) to enable/disable the preview style (#3246)\n- Update GitHub Action to support formatting of Jupyter Notebook files via a `jupyter`\n  option (#3282)\n- Update GitHub Action to support use of version specifiers (e.g. `<23`) for Black\n  version (#3265)\n\n## 22.8.0\n\n### Highlights\n\n- Python 3.11 is now supported, except for _blackd_ as aiohttp does not support 3.11 as\n  of publishing (#3234)\n- This is the last release that supports running _Black_ on Python 3.6 (formatting 3.6\n  code will continue to be supported until further notice)\n- Reword the stability policy to say that we may, in rare cases, make changes that\n  affect code that was not previously formatted by _Black_ (#3155)\n\n### Stable style\n\n- Fix an infinite loop when using `# fmt: on/off` in the middle of an expression or code\n  block (#3158)\n- Fix incorrect handling of `# fmt: skip` on colon (`:`) lines (#3148)\n- Comments are no longer deleted when a line had spaces removed around power operators\n  (#2874)\n\n### Preview style\n\n- Single-character closing docstring quotes are no longer moved to their own line as\n  this is invalid. This was a bug introduced in version 22.6.0. (#3166)\n- `--skip-string-normalization` / `-S` now prevents docstring prefixes from being\n  normalized as expected (#3168)\n- When using `--skip-magic-trailing-comma` or `-C`, trailing commas are stripped from\n  subscript expressions with more than 1 element (#3209)\n- Implicitly concatenated strings inside a list, set, or tuple are now wrapped inside\n  parentheses (#3162)\n- Fix a string merging/split issue when a comment is present in the middle of implicitly\n  concatenated strings on its own line (#3227)\n\n### _Blackd_\n\n- `blackd` now supports enabling the preview style via the `X-Preview` header (#3217)\n\n### Configuration\n\n- Black now uses the presence of debug f-strings to detect target version (#3215)\n- Fix misdetection of project root and verbose logging of sources in cases involving\n  `--stdin-filename` (#3216)\n- Immediate `.gitignore` files in source directories given on the command line are now\n  also respected, previously only `.gitignore` files in the project root and\n  automatically discovered directories were respected (#3237)\n\n### Documentation\n\n- Recommend using BlackConnect in IntelliJ IDEs (#3150)\n\n### Integrations\n\n- Vim plugin: prefix messages with `Black: ` so it's clear they come from Black (#3194)\n- Docker: changed to a /opt/venv installation + added to PATH to be available to\n  non-root users (#3202)\n\n### Output\n\n- Change from deprecated `asyncio.get_event_loop()` to create our event loop which\n  removes DeprecationWarning (#3164)\n- Remove logging from internal `blib2to3` library since it regularly emits error logs\n  about failed caching that can and should be ignored (#3193)\n\n### Parser\n\n- Type comments are now included in the AST equivalence check consistently so accidental\n  deletion raises an error. Though type comments can't be tracked when running on PyPy\n  3.7 due to standard library limitations. (#2874)\n\n### Performance\n\n- Reduce Black's startup time when formatting a single file by 15-30% (#3211)\n\n## 22.6.0\n\n### Style\n\n- Fix unstable formatting involving `#fmt: skip` and `# fmt:skip` comments (notice the\n  lack of spaces) (#2970)\n\n### Preview style\n\n- Docstring quotes are no longer moved if it would violate the line length limit (#3044)\n- Parentheses around return annotations are now managed (#2990)\n- Remove unnecessary parentheses around awaited objects (#2991)\n- Remove unnecessary parentheses in `with` statements (#2926)\n- Remove trailing newlines after code block open (#3035)\n\n### Integrations\n\n- Add `scripts/migrate-black.py` script to ease introduction of Black to a Git project\n  (#3038)\n\n### Output\n\n- Output Python version and implementation as part of `--version` flag (#2997)\n\n### Packaging\n\n- Use `tomli` instead of `tomllib` on Python 3.11 builds where `tomllib` is not\n  available (#2987)\n\n### Parser\n\n- [PEP 654](https://peps.python.org/pep-0654/#except) syntax (for example,\n  `except *ExceptionGroup:`) is now supported (#3016)\n- [PEP 646](https://peps.python.org/pep-0646) syntax (for example,\n  `Array[Batch, *Shape]` or `def fn(*args: *T) -> None`) is now supported (#3071)\n\n### Vim Plugin\n\n- Fix `strtobool` function. It didn't parse true/on/false/off. (#3025)\n\n## 22.3.0\n\n### Preview style\n\n- Code cell separators `#%%` are now standardised to `# %%` (#2919)\n- Remove unnecessary parentheses from `except` statements (#2939)\n- Remove unnecessary parentheses from tuple unpacking in `for` loops (#2945)\n- Avoid magic-trailing-comma in single-element subscripts (#2942)\n\n### Configuration\n\n- Do not format `__pypackages__` directories by default (#2836)\n- Add support for specifying stable version with `--required-version` (#2832).\n- Avoid crashing when the user has no homedir (#2814)\n- Avoid crashing when md5 is not available (#2905)\n- Fix handling of directory junctions on Windows (#2904)\n\n### Documentation\n\n- Update pylint config documentation (#2931)\n\n### Integrations\n\n- Move test to disable plugin in Vim/Neovim, which speeds up loading (#2896)\n\n### Output\n\n- In verbose mode, log when _Black_ is using user-level config (#2861)\n\n### Packaging\n\n- Fix Black to work with Click 8.1.0 (#2966)\n- On Python 3.11 and newer, use the standard library's `tomllib` instead of `tomli`\n  (#2903)\n- `black-primer`, the deprecated internal devtool, has been removed and copied to a\n  [separate repository](https://github.com/cooperlees/black-primer) (#2924)\n\n### Parser\n\n- Black can now parse starred expressions in the target of `for` and `async for`\n  statements, e.g `for item in *items_1, *items_2: pass` (#2879).\n\n## 22.1.0\n\nAt long last, _Black_ is no longer a beta product! This is the first non-beta release\nand the first release covered by our new\n[stability policy](https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy).\n\n### Highlights\n\n- **Remove Python 2 support** (#2740)\n- Introduce the `--preview` flag (#2752)\n\n### Style\n\n- Deprecate `--experimental-string-processing` and move the functionality under\n  `--preview` (#2789)\n- For stubs, one blank line between class attributes and methods is now kept if there's\n  at least one pre-existing blank line (#2736)\n- Black now normalizes string prefix order (#2297)\n- Remove spaces around power operators if both operands are simple (#2726)\n- Work around bug that causes unstable formatting in some cases in the presence of the\n  magic trailing comma (#2807)\n- Use parentheses for attribute access on decimal float and int literals (#2799)\n- Don't add whitespace for attribute access on hexadecimal, binary, octal, and complex\n  literals (#2799)\n- Treat blank lines in stubs the same inside top-level `if` statements (#2820)\n- Fix unstable formatting with semicolons and arithmetic expressions (#2817)\n- Fix unstable formatting around magic trailing comma (#2572)\n\n### Parser\n\n- Fix mapping cases that contain as-expressions, like `case {\"key\": 1 | 2 as password}`\n  (#2686)\n- Fix cases that contain multiple top-level as-expressions, like `case 1 as a, 2 as b`\n  (#2716)\n- Fix call patterns that contain as-expressions with keyword arguments, like\n  `case Foo(bar=baz as quux)` (#2749)\n- Tuple unpacking on `return` and `yield` constructs now implies 3.8+ (#2700)\n- Unparenthesized tuples on annotated assignments (e.g\n  `values: Tuple[int, ...] = 1, 2, 3`) now implies 3.8+ (#2708)\n- Fix handling of standalone `match()` or `case()` when there is a trailing newline or a\n  comment inside of the parentheses. (#2760)\n- `from __future__ import annotations` statement now implies Python 3.7+ (#2690)\n\n### Performance\n\n- Speed-up the new backtracking parser about 4X in general (enabled when\n  `--target-version` is set to 3.10 and higher). (#2728)\n- _Black_ is now compiled with [mypyc](https://github.com/mypyc/mypyc) for an overall 2x\n  speed-up. 64-bit Windows, MacOS, and Linux (not including musl) are supported. (#1009,\n  #2431)\n\n### Configuration\n\n- Do not accept bare carriage return line endings in pyproject.toml (#2408)\n- Add configuration option (`python-cell-magics`) to format cells with custom magics in\n  Jupyter Notebooks (#2744)\n- Allow setting custom cache directory on all platforms with environment variable\n  `BLACK_CACHE_DIR` (#2739).\n- Enable Python 3.10+ by default, without any extra need to specify\n  `--target-version=py310`. (#2758)\n- Make passing `SRC` or `--code` mandatory and mutually exclusive (#2804)\n\n### Output\n\n- Improve error message for invalid regular expression (#2678)\n- Improve error message when parsing fails during AST safety check by embedding the\n  underlying SyntaxError (#2693)\n- No longer color diff headers white as it's unreadable in light themed terminals\n  (#2691)\n- Text coloring added in the final statistics (#2712)\n- Verbose mode also now describes how a project root was discovered and which paths will\n  be formatted. (#2526)\n\n### Packaging\n\n- All upper version bounds on dependencies have been removed (#2718)\n- `typing-extensions` is no longer a required dependency in Python 3.10+ (#2772)\n- Set `click` lower bound to `8.0.0` (#2791)\n\n### Integrations\n\n- Update GitHub action to support containerized runs (#2748)\n\n### Documentation\n\n- Change protocol in pip installation instructions to `https://` (#2761)\n- Change HTML theme to Furo primarily for its responsive design and mobile support\n  (#2793)\n- Deprecate the `black-primer` tool (#2809)\n- Document Python support policy (#2819)\n\n## 21.12b0\n\n### _Black_\n\n- Fix determination of f-string expression spans (#2654)\n- Fix bad formatting of error messages about EOF in multi-line statements (#2343)\n- Functions and classes in blocks now have more consistent surrounding spacing (#2472)\n\n#### Jupyter Notebook support\n\n- Cell magics are now only processed if they are known Python cell magics. Earlier, all\n  cell magics were tokenized, leading to possible indentation errors e.g. with\n  `%%writefile`. (#2630)\n- Fix assignment to environment variables in Jupyter Notebooks (#2642)\n\n#### Python 3.10 support\n\n- Point users to using `--target-version py310` if we detect 3.10-only syntax (#2668)\n- Fix `match` statements with open sequence subjects, like `match a, b:` or\n  `match a, *b:` (#2639) (#2659)\n- Fix `match`/`case` statements that contain `match`/`case` soft keywords multiple\n  times, like `match re.match()` (#2661)\n- Fix `case` statements with an inline body (#2665)\n- Fix styling of starred expressions inside `match` subject (#2667)\n- Fix parser error location on invalid syntax in a `match` statement (#2649)\n- Fix Python 3.10 support on platforms without ProcessPoolExecutor (#2631)\n- Improve parsing performance on code that uses `match` under `--target-version py310`\n  up to ~50% (#2670)\n\n### Packaging\n\n- Remove dependency on `regex` (#2644) (#2663)\n\n## 21.11b1\n\n### _Black_\n\n- Bumped regex version minimum to 2021.4.4 to fix Pattern class usage (#2621)\n\n## 21.11b0\n\n### _Black_\n\n- Warn about Python 2 deprecation in more cases by improving Python 2 only syntax\n  detection (#2592)\n- Add experimental PyPy support (#2559)\n- Add partial support for the match statement. As it's experimental, it's only enabled\n  when `--target-version py310` is explicitly specified (#2586)\n- Add support for parenthesized with (#2586)\n- Declare support for Python 3.10 for running Black (#2562)\n\n### Integrations\n\n- Fixed vim plugin with Python 3.10 by removing deprecated distutils import (#2610)\n- The vim plugin now parses `skip_magic_trailing_comma` from pyproject.toml (#2613)\n\n## 21.10b0\n\n### _Black_\n\n- Document stability policy, that will apply for non-beta releases (#2529)\n- Add new `--workers` parameter (#2514)\n- Fixed feature detection for positional-only arguments in lambdas (#2532)\n- Bumped typed-ast version minimum to 1.4.3 for 3.10 compatibility (#2519)\n- Fixed a Python 3.10 compatibility issue where the loop argument was still being passed\n  even though it has been removed (#2580)\n- Deprecate Python 2 formatting support (#2523)\n\n### _Blackd_\n\n- Remove dependency on aiohttp-cors (#2500)\n- Bump required aiohttp version to 3.7.4 (#2509)\n\n### _Black-Primer_\n\n- Add primer support for --projects (#2555)\n- Print primer summary after individual failures (#2570)\n\n### Integrations\n\n- Allow to pass `target_version` in the vim plugin (#1319)\n- Install build tools in docker file and use multi-stage build to keep the image size\n  down (#2582)\n\n## 21.9b0\n\n### Packaging\n\n- Fix missing modules in self-contained binaries (#2466)\n- Fix missing toml extra used during installation (#2475)\n\n## 21.8b0\n\n### _Black_\n\n- Add support for formatting Jupyter Notebook files (#2357)\n- Move from `appdirs` dependency to `platformdirs` (#2375)\n- Present a more user-friendly error if .gitignore is invalid (#2414)\n- The failsafe for accidentally added backslashes in f-string expressions has been\n  hardened to handle more edge cases during quote normalization (#2437)\n- Avoid changing a function return type annotation's type to a tuple by adding a\n  trailing comma (#2384)\n- Parsing support has been added for unparenthesized walruses in set literals, set\n  comprehensions, and indices (#2447).\n- Pin `setuptools-scm` build-time dependency version (#2457)\n- Exclude typing-extensions version 3.10.0.1 due to it being broken on Python 3.10\n  (#2460)\n\n### _Blackd_\n\n- Replace sys.exit(-1) with raise ImportError as it plays more nicely with tools that\n  scan installed packages (#2440)\n\n### Integrations\n\n- The provided pre-commit hooks no longer specify `language_version` to avoid overriding\n  `default_language_version` (#2430)\n\n## 21.7b0\n\n### _Black_\n\n- Configuration files using TOML features higher than spec v0.5.0 are now supported\n  (#2301)\n- Add primer support and test for code piped into black via STDIN (#2315)\n- Fix internal error when `FORCE_OPTIONAL_PARENTHESES` feature is enabled (#2332)\n- Accept empty stdin (#2346)\n- Provide a more useful error when parsing fails during AST safety checks (#2304)\n\n### Docker\n\n- Add new `latest_release` tag automation to follow latest black release on docker\n  images (#2374)\n\n### Integrations\n\n- The vim plugin now searches upwards from the directory containing the current buffer\n  instead of the current working directory for pyproject.toml. (#1871)\n- The vim plugin now reads the correct string normalization option in pyproject.toml\n  (#1869)\n- The vim plugin no longer crashes Black when there's boolean values in pyproject.toml\n  (#1869)\n\n## 21.6b0\n\n### _Black_\n\n- Fix failure caused by `fmt: skip` and indentation (#2281)\n- Account for += assignment when deciding whether to split string (#2312)\n- Correct max string length calculation when there are string operators (#2292)\n- Fixed option usage when using the `--code` flag (#2259)\n- Do not call `uvloop.install()` when _Black_ is used as a library (#2303)\n- Added `--required-version` option to require a specific version to be running (#2300)\n- Fix incorrect custom breakpoint indices when string group contains fake f-strings\n  (#2311)\n- Fix regression where `R` prefixes would be lowercased for docstrings (#2285)\n- Fix handling of named escapes (`\\N{...}`) when `--experimental-string-processing` is\n  used (#2319)\n\n### Integrations\n\n- The official Black action now supports choosing what version to use, and supports the\n  major 3 OSes. (#1940)\n\n## 21.5b2\n\n### _Black_\n\n- A space is no longer inserted into empty docstrings (#2249)\n- Fix handling of .gitignore files containing non-ASCII characters on Windows (#2229)\n- Respect `.gitignore` files in all levels, not only `root/.gitignore` file (apply\n  `.gitignore` rules like `git` does) (#2225)\n- Restored compatibility with Click 8.0 on Python 3.6 when LANG=C used (#2227)\n- Add extra uvloop install + import support if in python env (#2258)\n- Fix --experimental-string-processing crash when matching parens are not found (#2283)\n- Make sure to split lines that start with a string operator (#2286)\n- Fix regular expression that black uses to identify f-expressions (#2287)\n\n### _Blackd_\n\n- Add a lower bound for the `aiohttp-cors` dependency. Only 0.4.0 or higher is\n  supported. (#2231)\n\n### Packaging\n\n- Release self-contained x86_64 MacOS binaries as part of the GitHub release pipeline\n  (#2198)\n- Always build binaries with the latest available Python (#2260)\n\n### Documentation\n\n- Add discussion of magic comments to FAQ page (#2272)\n- `--experimental-string-processing` will be enabled by default in the future (#2273)\n- Fix typos discovered by codespell (#2228)\n- Fix Vim plugin installation instructions. (#2235)\n- Add new Frequently Asked Questions page (#2247)\n- Fix encoding + symlink issues preventing proper build on Windows (#2262)\n\n## 21.5b1\n\n### _Black_\n\n- Refactor `src/black/__init__.py` into many files (#2206)\n\n### Documentation\n\n- Replaced all remaining references to the\n  [`master`](https://github.com/psf/black/tree/main) branch with the\n  [`main`](https://github.com/psf/black/tree/main) branch. Some additional changes in\n  the source code were also made. (#2210)\n- Sigificantly reorganized the documentation to make much more sense. Check them out by\n  heading over to [the stable docs on RTD](https://black.readthedocs.io/en/stable/).\n  (#2174)\n\n## 21.5b0\n\n### _Black_\n\n- Set `--pyi` mode if `--stdin-filename` ends in `.pyi` (#2169)\n- Stop detecting target version as Python 3.9+ with pre-PEP-614 decorators that are\n  being called but with no arguments (#2182)\n\n### _Black-Primer_\n\n- Add `--no-diff` to black-primer to suppress formatting changes (#2187)\n\n## 21.4b2\n\n### _Black_\n\n- Fix crash if the user configuration directory is inaccessible. (#2158)\n\n- Clarify\n  [circumstances](https://github.com/psf/black/blob/master/docs/the_black_code_style.md#pragmatism)\n  in which _Black_ may change the AST (#2159)\n\n- Allow `.gitignore` rules to be overridden by specifying `exclude` in `pyproject.toml`\n  or on the command line. (#2170)\n\n### _Packaging_\n\n- Install `primer.json` (used by `black-primer` by default) with black. (#2154)\n\n## 21.4b1\n\n### _Black_\n\n- Fix crash on docstrings ending with \"\\\\ \". (#2142)\n\n- Fix crash when atypical whitespace is cleaned out of dostrings (#2120)\n\n- Reflect the `--skip-magic-trailing-comma` and `--experimental-string-processing` flags\n  in the name of the cache file. Without this fix, changes in these flags would not take\n  effect if the cache had already been populated. (#2131)\n\n- Don't remove necessary parentheses from assignment expression containing assert /\n  return statements. (#2143)\n\n### _Packaging_\n\n- Bump pathspec to >= 0.8.1 to solve invalid .gitignore exclusion handling\n\n## 21.4b0\n\n### _Black_\n\n- Fixed a rare but annoying formatting instability created by the combination of\n  optional trailing commas inserted by `Black` and optional parentheses looking at\n  pre-existing \"magic\" trailing commas. This fixes issue #1629 and all of its many many\n  duplicates. (#2126)\n\n- `Black` now processes one-line docstrings by stripping leading and trailing spaces,\n  and adding a padding space when needed to break up \"\"\"\". (#1740)\n\n- `Black` now cleans up leading non-breaking spaces in comments (#2092)\n\n- `Black` now respects `--skip-string-normalization` when normalizing multiline\n  docstring quotes (#1637)\n\n- `Black` no longer removes all empty lines between non-function code and decorators\n  when formatting typing stubs. Now `Black` enforces a single empty line. (#1646)\n\n- `Black` no longer adds an incorrect space after a parenthesized assignment expression\n  in if/while statements (#1655)\n\n- Added `--skip-magic-trailing-comma` / `-C` to avoid using trailing commas as a reason\n  to split lines (#1824)\n\n- fixed a crash when PWD=/ on POSIX (#1631)\n\n- fixed \"I/O operation on closed file\" when using --diff (#1664)\n\n- Prevent coloured diff output being interleaved with multiple files (#1673)\n\n- Added support for PEP 614 relaxed decorator syntax on python 3.9 (#1711)\n\n- Added parsing support for unparenthesized tuples and yield expressions in annotated\n  assignments (#1835)\n\n- added `--extend-exclude` argument (PR #2005)\n\n- speed up caching by avoiding pathlib (#1950)\n\n- `--diff` correctly indicates when a file doesn't end in a newline (#1662)\n\n- Added `--stdin-filename` argument to allow stdin to respect `--force-exclude` rules\n  (#1780)\n\n- Lines ending with `fmt: skip` will now be not formatted (#1800)\n\n- PR #2053: Black no longer relies on typed-ast for Python 3.8 and higher\n\n- PR #2053: Python 2 support is now optional, install with\n  `python3 -m pip install black[python2]` to maintain support.\n\n- Exclude `venv` directory by default (#1683)\n\n- Fixed \"Black produced code that is not equivalent to the source\" when formatting\n  Python 2 docstrings (#2037)\n\n### _Packaging_\n\n- Self-contained native _Black_ binaries are now provided for releases via GitHub\n  Releases (#1743)\n\n## 20.8b1\n\n### _Packaging_\n\n- explicitly depend on Click 7.1.2 or newer as `Black` no longer works with versions\n  older than 7.0\n\n## 20.8b0\n\n### _Black_\n\n- re-implemented support for explicit trailing commas: now it works consistently within\n  any bracket pair, including nested structures (#1288 and duplicates)\n\n- `Black` now reindents docstrings when reindenting code around it (#1053)\n\n- `Black` now shows colored diffs (#1266)\n\n- `Black` is now packaged using 'py3' tagged wheels (#1388)\n\n- `Black` now supports Python 3.8 code, e.g. star expressions in return statements\n  (#1121)\n\n- `Black` no longer normalizes capital R-string prefixes as those have a\n  community-accepted meaning (#1244)\n\n- `Black` now uses exit code 2 when specified configuration file doesn't exit (#1361)\n\n- `Black` now works on AWS Lambda (#1141)\n\n- added `--force-exclude` argument (#1032)\n\n- removed deprecated `--py36` option (#1236)\n\n- fixed `--diff` output when EOF is encountered (#526)\n\n- fixed `# fmt: off` handling around decorators (#560)\n\n- fixed unstable formatting with some `# type: ignore` comments (#1113)\n\n- fixed invalid removal on organizing brackets followed by indexing (#1575)\n\n- introduced `black-primer`, a CI tool that allows us to run regression tests against\n  existing open source users of Black (#1402)\n\n- introduced property-based fuzzing to our test suite based on Hypothesis and\n  Hypothersmith (#1566)\n\n- implemented experimental and disabled by default long string rewrapping (#1132),\n  hidden under a `--experimental-string-processing` flag while it's being worked on;\n  this is an undocumented and unsupported feature, you lose Internet points for\n  depending on it (#1609)\n\n### Vim plugin\n\n- prefer virtualenv packages over global packages (#1383)\n\n## 19.10b0\n\n- added support for PEP 572 assignment expressions (#711)\n\n- added support for PEP 570 positional-only arguments (#943)\n\n- added support for async generators (#593)\n\n- added support for pre-splitting collections by putting an explicit trailing comma\n  inside (#826)\n\n- added `black -c` as a way to format code passed from the command line (#761)\n\n- --safe now works with Python 2 code (#840)\n\n- fixed grammar selection for Python 2-specific code (#765)\n\n- fixed feature detection for trailing commas in function definitions and call sites\n  (#763)\n\n- `# fmt: off`/`# fmt: on` comment pairs placed multiple times within the same block of\n  code now behave correctly (#1005)\n\n- _Black_ no longer crashes on Windows machines with more than 61 cores (#838)\n\n- _Black_ no longer crashes on standalone comments prepended with a backslash (#767)\n\n- _Black_ no longer crashes on `from` ... `import` blocks with comments (#829)\n\n- _Black_ no longer crashes on Python 3.7 on some platform configurations (#494)\n\n- _Black_ no longer fails on comments in from-imports (#671)\n\n- _Black_ no longer fails when the file starts with a backslash (#922)\n\n- _Black_ no longer merges regular comments with type comments (#1027)\n\n- _Black_ no longer splits long lines that contain type comments (#997)\n\n- removed unnecessary parentheses around `yield` expressions (#834)\n\n- added parentheses around long tuples in unpacking assignments (#832)\n\n- added parentheses around complex powers when they are prefixed by a unary operator\n  (#646)\n\n- fixed bug that led _Black_ format some code with a line length target of 1 (#762)\n\n- _Black_ no longer introduces quotes in f-string subexpressions on string boundaries\n  (#863)\n\n- if _Black_ puts parenthesis around a single expression, it moves comments to the\n  wrapped expression instead of after the brackets (#872)\n\n- `blackd` now returns the version of _Black_ in the response headers (#1013)\n\n- `blackd` can now output the diff of formats on source code when the `X-Diff` header is\n  provided (#969)\n\n## 19.3b0\n\n- new option `--target-version` to control which Python versions _Black_-formatted code\n  should target (#618)\n\n- deprecated `--py36` (use `--target-version=py36` instead) (#724)\n\n- _Black_ no longer normalizes numeric literals to include `_` separators (#696)\n\n- long `del` statements are now split into multiple lines (#698)\n\n- type comments are no longer mangled in function signatures\n\n- improved performance of formatting deeply nested data structures (#509)\n\n- _Black_ now properly formats multiple files in parallel on Windows (#632)\n\n- _Black_ now creates cache files atomically which allows it to be used in parallel\n  pipelines (like `xargs -P8`) (#673)\n\n- _Black_ now correctly indents comments in files that were previously formatted with\n  tabs (#262)\n\n- `blackd` now supports CORS (#622)\n\n## 18.9b0\n\n- numeric literals are now formatted by _Black_ (#452, #461, #464, #469):\n\n  - numeric literals are normalized to include `_` separators on Python 3.6+ code\n\n  - added `--skip-numeric-underscore-normalization` to disable the above behavior and\n    leave numeric underscores as they were in the input\n\n  - code with `_` in numeric literals is recognized as Python 3.6+\n\n  - most letters in numeric literals are lowercased (e.g., in `1e10`, `0x01`)\n\n  - hexadecimal digits are always uppercased (e.g. `0xBADC0DE`)\n\n- added `blackd`, see\n  [its documentation](https://github.com/psf/black/blob/18.9b0/README.md#blackd) for\n  more info (#349)\n\n- adjacent string literals are now correctly split into multiple lines (#463)\n\n- trailing comma is now added to single imports that don't fit on a line (#250)\n\n- cache is now populated when `--check` is successful for a file which speeds up\n  consecutive checks of properly formatted unmodified files (#448)\n\n- whitespace at the beginning of the file is now removed (#399)\n\n- fixed mangling [pweave](http://mpastell.com/pweave/) and\n  [Spyder IDE](https://www.spyder-ide.org/) special comments (#532)\n\n- fixed unstable formatting when unpacking big tuples (#267)\n\n- fixed parsing of `__future__` imports with renames (#389)\n\n- fixed scope of `# fmt: off` when directly preceding `yield` and other nodes (#385)\n\n- fixed formatting of lambda expressions with default arguments (#468)\n\n- fixed `async for` statements: _Black_ no longer breaks them into separate lines (#372)\n\n- note: the Vim plugin stopped registering `,=` as a default chord as it turned out to\n  be a bad idea (#415)\n\n## 18.6b4\n\n- hotfix: don't freeze when multiple comments directly precede `# fmt: off` (#371)\n\n## 18.6b3\n\n- typing stub files (`.pyi`) now have blank lines added after constants (#340)\n\n- `# fmt: off` and `# fmt: on` are now much more dependable:\n\n  - they now work also within bracket pairs (#329)\n\n  - they now correctly work across function/class boundaries (#335)\n\n  - they now work when an indentation block starts with empty lines or misaligned\n    comments (#334)\n\n- made Click not fail on invalid environments; note that Click is right but the\n  likelihood we'll need to access non-ASCII file paths when dealing with Python source\n  code is low (#277)\n\n- fixed improper formatting of f-strings with quotes inside interpolated expressions\n  (#322)\n\n- fixed unnecessary slowdown when long list literals where found in a file\n\n- fixed unnecessary slowdown on AST nodes with very many siblings\n\n- fixed cannibalizing backslashes during string normalization\n\n- fixed a crash due to symbolic links pointing outside of the project directory (#338)\n\n## 18.6b2\n\n- added `--config` (#65)\n\n- added `-h` equivalent to `--help` (#316)\n\n- fixed improper unmodified file caching when `-S` was used\n\n- fixed extra space in string unpacking (#305)\n\n- fixed formatting of empty triple quoted strings (#313)\n\n- fixed unnecessary slowdown in comment placement calculation on lines without comments\n\n## 18.6b1\n\n- hotfix: don't output human-facing information on stdout (#299)\n\n- hotfix: don't output cake emoji on non-zero return code (#300)\n\n## 18.6b0\n\n- added `--include` and `--exclude` (#270)\n\n- added `--skip-string-normalization` (#118)\n\n- added `--verbose` (#283)\n\n- the header output in `--diff` now actually conforms to the unified diff spec\n\n- fixed long trivial assignments being wrapped in unnecessary parentheses (#273)\n\n- fixed unnecessary parentheses when a line contained multiline strings (#232)\n\n- fixed stdin handling not working correctly if an old version of Click was used (#276)\n\n- _Black_ now preserves line endings when formatting a file in place (#258)\n\n## 18.5b1\n\n- added `--pyi` (#249)\n\n- added `--py36` (#249)\n\n- Python grammar pickle caches are stored with the formatting caches, making _Black_\n  work in environments where site-packages is not user-writable (#192)\n\n- _Black_ now enforces a PEP 257 empty line after a class-level docstring (and/or\n  fields) and the first method\n\n- fixed invalid code produced when standalone comments were present in a trailer that\n  was omitted from line splitting on a large expression (#237)\n\n- fixed optional parentheses being removed within `# fmt: off` sections (#224)\n\n- fixed invalid code produced when stars in very long imports were incorrectly wrapped\n  in optional parentheses (#234)\n\n- fixed unstable formatting when inline comments were moved around in a trailer that was\n  omitted from line splitting on a large expression (#238)\n\n- fixed extra empty line between a class declaration and the first method if no class\n  docstring or fields are present (#219)\n\n- fixed extra empty line between a function signature and an inner function or inner\n  class (#196)\n\n## 18.5b0\n\n- call chains are now formatted according to the\n  [fluent interfaces](https://en.wikipedia.org/wiki/Fluent_interface) style (#67)\n\n- data structure literals (tuples, lists, dictionaries, and sets) are now also always\n  exploded like imports when they don't fit in a single line (#152)\n\n- slices are now formatted according to PEP 8 (#178)\n\n- parentheses are now also managed automatically on the right-hand side of assignments\n  and return statements (#140)\n\n- math operators now use their respective priorities for delimiting multiline\n  expressions (#148)\n\n- optional parentheses are now omitted on expressions that start or end with a bracket\n  and only contain a single operator (#177)\n\n- empty parentheses in a class definition are now removed (#145, #180)\n\n- string prefixes are now standardized to lowercase and `u` is removed on Python 3.6+\n  only code and Python 2.7+ code with the `unicode_literals` future import (#188, #198,\n  #199)\n\n- typing stub files (`.pyi`) are now formatted in a style that is consistent with PEP\n  484 (#207, #210)\n\n- progress when reformatting many files is now reported incrementally\n\n- fixed trailers (content with brackets) being unnecessarily exploded into their own\n  lines after a dedented closing bracket (#119)\n\n- fixed an invalid trailing comma sometimes left in imports (#185)\n\n- fixed non-deterministic formatting when multiple pairs of removable parentheses were\n  used (#183)\n\n- fixed multiline strings being unnecessarily wrapped in optional parentheses in long\n  assignments (#215)\n\n- fixed not splitting long from-imports with only a single name\n\n- fixed Python 3.6+ file discovery by also looking at function calls with unpacking.\n  This fixed non-deterministic formatting if trailing commas where used both in function\n  signatures with stars and function calls with stars but the former would be\n  reformatted to a single line.\n\n- fixed crash on dealing with optional parentheses (#193)\n\n- fixed \"is\", \"is not\", \"in\", and \"not in\" not considered operators for splitting\n  purposes\n\n- fixed crash when dead symlinks where encountered\n\n## 18.4a4\n\n- don't populate the cache on `--check` (#175)\n\n## 18.4a3\n\n- added a \"cache\"; files already reformatted that haven't changed on disk won't be\n  reformatted again (#109)\n\n- `--check` and `--diff` are no longer mutually exclusive (#149)\n\n- generalized star expression handling, including double stars; this fixes\n  multiplication making expressions \"unsafe\" for trailing commas (#132)\n\n- _Black_ no longer enforces putting empty lines behind control flow statements (#90)\n\n- _Black_ now splits imports like \"Mode 3 + trailing comma\" of isort (#127)\n\n- fixed comment indentation when a standalone comment closes a block (#16, #32)\n\n- fixed standalone comments receiving extra empty lines if immediately preceding a\n  class, def, or decorator (#56, #154)\n\n- fixed `--diff` not showing entire path (#130)\n\n- fixed parsing of complex expressions after star and double stars in function calls\n  (#2)\n\n- fixed invalid splitting on comma in lambda arguments (#133)\n\n- fixed missing splits of ternary expressions (#141)\n\n## 18.4a2\n\n- fixed parsing of unaligned standalone comments (#99, #112)\n\n- fixed placement of dictionary unpacking inside dictionary literals (#111)\n\n- Vim plugin now works on Windows, too\n\n- fixed unstable formatting when encountering unnecessarily escaped quotes in a string\n  (#120)\n\n## 18.4a1\n\n- added `--quiet` (#78)\n\n- added automatic parentheses management (#4)\n\n- added [pre-commit](https://pre-commit.com) integration (#103, #104)\n\n- fixed reporting on `--check` with multiple files (#101, #102)\n\n- fixed removing backslash escapes from raw strings (#100, #105)\n\n## 18.4a0\n\n- added `--diff` (#87)\n\n- add line breaks before all delimiters, except in cases like commas, to better comply\n  with PEP 8 (#73)\n\n- standardize string literals to use double quotes (almost) everywhere (#75)\n\n- fixed handling of standalone comments within nested bracketed expressions; _Black_\n  will no longer produce super long lines or put all standalone comments at the end of\n  the expression (#22)\n\n- fixed 18.3a4 regression: don't crash and burn on empty lines with trailing whitespace\n  (#80)\n\n- fixed 18.3a4 regression: `# yapf: disable` usage as trailing comment would cause\n  _Black_ to not emit the rest of the file (#95)\n\n- when CTRL+C is pressed while formatting many files, _Black_ no longer freaks out with\n  a flurry of asyncio-related exceptions\n\n- only allow up to two empty lines on module level and only single empty lines within\n  functions (#74)\n\n## 18.3a4\n\n- `# fmt: off` and `# fmt: on` are implemented (#5)\n\n- automatic detection of deprecated Python 2 forms of print statements and exec\n  statements in the formatted file (#49)\n\n- use proper spaces for complex expressions in default values of typed function\n  arguments (#60)\n\n- only return exit code 1 when --check is used (#50)\n\n- don't remove single trailing commas from square bracket indexing (#59)\n\n- don't omit whitespace if the previous factor leaf wasn't a math operator (#55)\n\n- omit extra space in kwarg unpacking if it's the first argument (#46)\n\n- omit extra space in\n  [Sphinx auto-attribute comments](http://www.sphinx-doc.org/en/stable/ext/autodoc.html#directive-autoattribute)\n  (#68)\n\n## 18.3a3\n\n- don't remove single empty lines outside of bracketed expressions (#19)\n\n- added ability to pipe formatting from stdin to stdin (#25)\n\n- restored ability to format code with legacy usage of `async` as a name (#20, #42)\n\n- even better handling of numpy-style array indexing (#33, again)\n\n## 18.3a2\n\n- changed positioning of binary operators to occur at beginning of lines instead of at\n  the end, following\n  [a recent change to PEP 8](https://github.com/python/peps/commit/c59c4376ad233a62ca4b3a6060c81368bd21e85b)\n  (#21)\n\n- ignore empty bracket pairs while splitting. This avoids very weirdly looking\n  formattings (#34, #35)\n\n- remove a trailing comma if there is a single argument to a call\n\n- if top level functions were separated by a comment, don't put four empty lines after\n  the upper function\n\n- fixed unstable formatting of newlines with imports\n\n- fixed unintentional folding of post scriptum standalone comments into last statement\n  if it was a simple statement (#18, #28)\n\n- fixed missing space in numpy-style array indexing (#33)\n\n- fixed spurious space after star-based unary expressions (#31)\n\n## 18.3a1\n\n- added `--check`\n\n- only put trailing commas in function signatures and calls if it's safe to do so. If\n  the file is Python 3.6+ it's always safe, otherwise only safe if there are no `*args`\n  or `**kwargs` used in the signature or call. (#8)\n\n- fixed invalid spacing of dots in relative imports (#6, #13)\n\n- fixed invalid splitting after comma on unpacked variables in for-loops (#23)\n\n- fixed spurious space in parenthesized set expressions (#7)\n\n- fixed spurious space after opening parentheses and in default arguments (#14, #17)\n\n- fixed spurious space after unary operators when the operand was a complex expression\n  (#15)\n\n## 18.3a0\n\n- first published version, Happy 🍰 Day 2018!\n\n- alpha quality\n\n- date-versioned (see: <https://calver.org/>)\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "automation",
          "autopep8",
          "formatter",
          "gofmt",
          "pyfmt",
          "rustfmt",
          "yapf"
        ],
        "author_email": "Łukasz Langa <lukasz@langa.pl>",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Software Development :: Quality Assurance"
        ],
        "requires_dist": [
          "click>=8.0.0",
          "mypy-extensions>=0.4.3",
          "packaging>=22.0",
          "pathspec>=0.9.0",
          "platformdirs>=2",
          "tomli>=1.1.0; python_version < '3.11'",
          "typing-extensions>=4.0.1; python_version < '3.11'",
          "colorama>=0.4.3; extra == 'colorama'",
          "aiohttp>=3.7.4; extra == 'd'",
          "ipython>=7.8.0; extra == 'jupyter'",
          "tokenize-rt>=3.2.0; extra == 'jupyter'",
          "uvloop>=0.15.2; extra == 'uvloop'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Changelog, https://github.com/psf/black/blob/main/CHANGES.md",
          "Homepage, https://github.com/psf/black"
        ],
        "provides_extra": [
          "colorama",
          "d",
          "jupyter",
          "uvloop"
        ]
      }
    },
    {
      "download_info": {
        "url": "file:///home/jeromeku/Python/packaging/catlifier-py",
        "dir_info": {
          "editable": true
        }
      },
      "is_direct": true,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "catlifier",
        "version": "0.1.0",
        "summary": "My catlifier library",
        "description_content_type": "text/markdown",
        "keywords": [
          "cats",
          "purr",
          "packaging"
        ],
        "author_email": "Robin Mueller <robin.mueller.m@gmail.com>",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Natural Language :: English",
          "Operating System :: POSIX",
          "Operating System :: Microsoft :: Windows",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Communications",
          "Topic :: Software Development :: Libraries",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "crcmod ~=1.7",
          "pytest ; extra == 'dev'",
          "black ; extra == 'dev'",
          "flake8 ; extra == 'dev'",
          "mypy ; extra == 'dev'",
          "isort ; extra == 'dev'",
          "sphinx-rtd-theme ; extra == 'dev'",
          "sphinx ; extra == 'dev'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Homepage, https://github.com/robamu/catlifier"
        ],
        "provides_extra": [
          "dev"
        ]
      },
      "requested_extras": [
        "dev"
      ]
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b0/24/bbf7175ffc47cb3d3e1eb523ddb23272968359dfcf2e1294707a2bf12fc4/flake8-6.1.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=ffdfce58ea94c6580c77888a86506937f9a1a227dfcd15f245d694ae20a6b6e5",
          "hashes": {
            "sha256": "ffdfce58ea94c6580c77888a86506937f9a1a227dfcd15f245d694ae20a6b6e5"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "flake8",
        "version": "6.1.0",
        "summary": "the modular source code checker: pep8 pyflakes and co",
        "description": ".. image:: https://github.com/PyCQA/flake8/workflows/main/badge.svg\n   :target: https://github.com/PyCQA/flake8/actions?query=workflow%3Amain\n   :alt: build status\n\n.. image:: https://results.pre-commit.ci/badge/github/PyCQA/flake8/main.svg\n   :target: https://results.pre-commit.ci/latest/github/PyCQA/flake8/main\n   :alt: pre-commit.ci status\n\n.. image:: https://img.shields.io/discord/825463413634891776.svg\n   :target: https://discord.gg/qYxpadCgkx\n   :alt: Discord\n\n========\n Flake8\n========\n\nFlake8 is a wrapper around these tools:\n\n- PyFlakes\n- pycodestyle\n- Ned Batchelder's McCabe script\n\nFlake8 runs all the tools by launching the single ``flake8`` command.\nIt displays the warnings in a per-file, merged output.\n\nIt also adds a few features:\n\n- files that contain this line are skipped::\n\n    # flake8: noqa\n\n- lines that contain a ``# noqa`` comment at the end will not issue warnings.\n- you can ignore specific errors on a line with ``# noqa: <error>``, e.g.,\n  ``# noqa: E234``. Multiple codes can be given, separated by comma. The ``noqa`` token is case insensitive, the colon before the list of codes is required otherwise the part after ``noqa`` is ignored\n- Git and Mercurial hooks\n- extendable through ``flake8.extension`` and ``flake8.formatting`` entry\n  points\n\n\nQuickstart\n==========\n\nSee our `quickstart documentation\n<https://flake8.pycqa.org/en/latest/index.html#quickstart>`_ for how to install\nand get started with Flake8.\n\n\nFrequently Asked Questions\n==========================\n\nFlake8 maintains an `FAQ <https://flake8.pycqa.org/en/latest/faq.html>`_ in its\ndocumentation.\n\n\nQuestions or Feedback\n=====================\n\nIf you have questions you'd like to ask the developers, or feedback you'd like\nto provide, feel free to use the mailing list: code-quality@python.org\n\nWe would love to hear from you. Additionally, if you have a feature you'd like\nto suggest, the mailing list would be the best place for it.\n\n\nLinks\n=====\n\n* `Flake8 Documentation <https://flake8.pycqa.org/en/latest/>`_\n\n* `GitHub Project <https://github.com/pycqa/flake8>`_\n\n* `All (Open and Closed) Issues\n  <https://github.com/pycqa/flake8/issues?q=is%3Aissue>`_\n\n* `Code-Quality Archives\n  <https://mail.python.org/mailman/listinfo/code-quality>`_\n\n* `Code of Conduct\n  <https://flake8.pycqa.org/en/latest/internal/contributing.html#code-of-conduct>`_\n\n* `Getting Started Contributing\n  <https://flake8.pycqa.org/en/latest/internal/contributing.html>`_\n\n\nMaintenance\n===========\n\nFlake8 was created by Tarek Ziadé and is currently maintained by `anthony sottile\n<https://github.com/sponsors/asottile>`_ and `Ian Cordasco\n<https://www.coglib.com/~icordasc/>`_\n",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/pycqa/flake8",
        "author": "Tarek Ziade",
        "author_email": "tarek@ziade.org",
        "maintainer": "Ian Stapleton Cordasco",
        "maintainer_email": "graffatcolmingov@gmail.com",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Framework :: Flake8",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Software Development :: Quality Assurance"
        ],
        "requires_dist": [
          "mccabe (<0.8.0,>=0.7.0)",
          "pycodestyle (<2.12.0,>=2.11.0)",
          "pyflakes (<3.2.0,>=3.1.0)"
        ],
        "requires_python": ">=3.8.1"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/0a/63/4036ae70eea279c63e2304b91ee0ac182f467f24f86394ecfe726092340b/isort-5.12.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f84c2818376e66cf843d497486ea8fed8700b340f308f076c6fb1229dff318b6",
          "hashes": {
            "sha256": "f84c2818376e66cf843d497486ea8fed8700b340f308f076c6fb1229dff318b6"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "isort",
        "version": "5.12.0",
        "summary": "A Python utility / library to sort Python imports.",
        "description": "[![isort - isort your imports, so you don't have to.](https://raw.githubusercontent.com/pycqa/isort/main/art/logo_large.png)](https://pycqa.github.io/isort/)\n\n------------------------------------------------------------------------\n\n[![PyPI version](https://badge.fury.io/py/isort.svg)](https://badge.fury.io/py/isort)\n[![Test Status](https://github.com/pycqa/isort/workflows/Test/badge.svg?branch=develop)](https://github.com/pycqa/isort/actions?query=workflow%3ATest)\n[![Lint Status](https://github.com/pycqa/isort/workflows/Lint/badge.svg?branch=develop)](https://github.com/pycqa/isort/actions?query=workflow%3ALint)\n[![Code coverage Status](https://codecov.io/gh/pycqa/isort/branch/main/graph/badge.svg)](https://codecov.io/gh/pycqa/isort)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.org/project/isort/)\n[![Join the chat at https://gitter.im/timothycrosley/isort](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/timothycrosley/isort?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Downloads](https://pepy.tech/badge/isort)](https://pepy.tech/project/isort)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\n[![DeepSource](https://static.deepsource.io/deepsource-badge-light-mini.svg)](https://deepsource.io/gh/pycqa/isort/?ref=repository-badge)\n_________________\n\n[Read Latest Documentation](https://pycqa.github.io/isort/) - [Browse GitHub Code Repository](https://github.com/pycqa/isort/)\n_________________\n\nisort your imports, so you don't have to.\n\nisort is a Python utility / library to sort imports alphabetically, and\nautomatically separated into sections and by type. It provides a command line\nutility, Python library and [plugins for various\neditors](https://github.com/pycqa/isort/wiki/isort-Plugins) to\nquickly sort all your imports. It requires Python 3.8+ to run but\nsupports formatting Python 2 code too.\n\n- [Try isort now from your browser!](https://pycqa.github.io/isort/docs/quick_start/0.-try.html)\n- [Using black? See the isort and black compatibility guide.](https://pycqa.github.io/isort/docs/configuration/black_compatibility.html)\n- [isort has official support for pre-commit!](https://pycqa.github.io/isort/docs/configuration/pre-commit.html)\n\n![Example Usage](https://raw.github.com/pycqa/isort/main/example.gif)\n\nBefore isort:\n\n```python\nfrom my_lib import Object\n\nimport os\n\nfrom my_lib import Object3\n\nfrom my_lib import Object2\n\nimport sys\n\nfrom third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14\n\nimport sys\n\nfrom __future__ import absolute_import\n\nfrom third_party import lib3\n\nprint(\"Hey\")\nprint(\"yo\")\n```\n\nAfter isort:\n\n```python\nfrom __future__ import absolute_import\n\nimport os\nimport sys\n\nfrom third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,\n                         lib9, lib10, lib11, lib12, lib13, lib14, lib15)\n\nfrom my_lib import Object, Object2, Object3\n\nprint(\"Hey\")\nprint(\"yo\")\n```\n\n## Installing isort\n\nInstalling isort is as simple as:\n\n```bash\npip install isort\n```\n\nInstall isort with requirements.txt support:\n\n```bash\npip install isort[requirements_deprecated_finder]\n```\n\nInstall isort with Pipfile support:\n\n```bash\npip install isort[pipfile_deprecated_finder]\n```\n\nInstall isort with both formats support:\n\n```bash\npip install isort[requirements_deprecated_finder,pipfile_deprecated_finder]\n```\n\n## Using isort\n\n**From the command line**:\n\nTo run on specific files:\n\n```bash\nisort mypythonfile.py mypythonfile2.py\n```\n\nTo apply recursively:\n\n```bash\nisort .\n```\n\nIf [globstar](https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html)\nis enabled, `isort .` is equivalent to:\n\n```bash\nisort **/*.py\n```\n\nTo view proposed changes without applying them:\n\n```bash\nisort mypythonfile.py --diff\n```\n\nFinally, to atomically run isort against a project, only applying\nchanges if they don't introduce syntax errors:\n\n```bash\nisort --atomic .\n```\n\n(Note: this is disabled by default, as it prevents isort from\nrunning against code written using a different version of Python.)\n\n**From within Python**:\n\n```python\nimport isort\n\nisort.file(\"pythonfile.py\")\n```\n\nor:\n\n```python\nimport isort\n\nsorted_code = isort.code(\"import b\\nimport a\\n\")\n```\n\n## Installing isort's for your preferred text editor\n\nSeveral plugins have been written that enable to use isort from within a\nvariety of text-editors. You can find a full list of them [on the isort\nwiki](https://github.com/pycqa/isort/wiki/isort-Plugins).\nAdditionally, I will enthusiastically accept pull requests that include\nplugins for other text editors and add documentation for them as I am\nnotified.\n\n## Multi line output modes\n\nYou will notice above the \\\"multi\\_line\\_output\\\" setting. This setting\ndefines how from imports wrap when they extend past the line\\_length\nlimit and has [12 possible settings](https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html).\n\n## Indentation\n\nTo change the how constant indents appear - simply change the\nindent property with the following accepted formats:\n\n-   Number of spaces you would like. For example: 4 would cause standard\n    4 space indentation.\n-   Tab\n-   A verbatim string with quotes around it.\n\nFor example:\n\n```python\n\"    \"\n```\n\nis equivalent to 4.\n\nFor the import styles that use parentheses, you can control whether or\nnot to include a trailing comma after the last import with the\n`include_trailing_comma` option (defaults to `False`).\n\n## Intelligently Balanced Multi-line Imports\n\nAs of isort 3.1.0 support for balanced multi-line imports has been\nadded. With this enabled isort will dynamically change the import length\nto the one that produces the most balanced grid, while staying below the\nmaximum import length defined.\n\nExample:\n\n```python\nfrom __future__ import (absolute_import, division,\n                        print_function, unicode_literals)\n```\n\nWill be produced instead of:\n\n```python\nfrom __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n```\n\nTo enable this set `balanced_wrapping` to `True` in your config or pass\nthe `-e` option into the command line utility.\n\n## Custom Sections and Ordering\n\nisort provides configuration options to change almost every aspect of how\nimports are organized, ordered, or grouped together in sections.\n\n[Click here](https://pycqa.github.io/isort/docs/configuration/custom_sections_and_ordering.html) for an overview of all these options.\n\n## Skip processing of imports (outside of configuration)\n\nTo make isort ignore a single import simply add a comment at the end of\nthe import line containing the text `isort:skip`:\n\n```python\nimport module  # isort:skip\n```\n\nor:\n\n```python\nfrom xyz import (abc,  # isort:skip\n                 yo,\n                 hey)\n```\n\nTo make isort skip an entire file simply add `isort:skip_file` to the\nmodule's doc string:\n\n```python\n\"\"\" my_module.py\n    Best module ever\n\n   isort:skip_file\n\"\"\"\n\nimport b\nimport a\n```\n\n## Adding or removing an import from multiple files\n\nisort can be ran or configured to add / remove imports automatically.\n\n[See a complete guide here.](https://pycqa.github.io/isort/docs/configuration/add_or_remove_imports.html)\n\n## Using isort to verify code\n\nThe `--check-only` option\n-------------------------\n\nisort can also be used to verify that code is correctly formatted\nby running it with `-c`. Any files that contain incorrectly sorted\nand/or formatted imports will be outputted to `stderr`.\n\n```bash\nisort **/*.py -c -v\n\nSUCCESS: /home/timothy/Projects/Open_Source/isort/isort_kate_plugin.py Everything Looks Good!\nERROR: /home/timothy/Projects/Open_Source/isort/isort/isort.py Imports are incorrectly sorted.\n```\n\nOne great place this can be used is with a pre-commit git hook, such as\nthis one by \\@acdha:\n\n<https://gist.github.com/acdha/8717683>\n\nThis can help to ensure a certain level of code quality throughout a\nproject.\n\n## Git hook\n\nisort provides a hook function that can be integrated into your Git\npre-commit script to check Python code before committing.\n\n[More info here.](https://pycqa.github.io/isort/docs/configuration/git_hook.html)\n\n## Setuptools integration\n\nUpon installation, isort enables a `setuptools` command that checks\nPython files declared by your project.\n\n[More info here.](https://pycqa.github.io/isort/docs/configuration/setuptools_integration.html)\n\n## Spread the word\n\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\n\nPlace this badge at the top of your repository to let others know your project uses isort.\n\nFor README.md:\n\n```markdown\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\n```\n\nOr README.rst:\n\n```rst\n.. image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336\n    :target: https://pycqa.github.io/isort/\n```\n\n## Security contact information\n\nTo report a security vulnerability, please use the [Tidelift security\ncontact](https://tidelift.com/security). Tidelift will coordinate the\nfix and disclosure.\n\n## Why isort?\n\nisort simply stands for import sort. It was originally called\n\"sortImports\" however I got tired of typing the extra characters and\ncame to the realization camelCase is not pythonic.\n\nI wrote isort because in an organization I used to work in the manager\ncame in one day and decided all code must have alphabetically sorted\nimports. The code base was huge - and he meant for us to do it by hand.\nHowever, being a programmer - I\\'m too lazy to spend 8 hours mindlessly\nperforming a function, but not too lazy to spend 16 hours automating it.\nI was given permission to open source sortImports and here we are :)\n\n------------------------------------------------------------------------\n\n[Get professionally supported isort with the Tidelift\nSubscription](https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&utm_medium=referral&utm_campaign=readme)\n\nProfessional support for isort is available as part of the [Tidelift\nSubscription](https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&utm_medium=referral&utm_campaign=readme).\nTidelift gives software development teams a single source for purchasing\nand maintaining their software, with professional grade assurances from\nthe experts who know it best, while seamlessly integrating with existing\ntools.\n\n------------------------------------------------------------------------\n\nThanks and I hope you find isort useful!\n\n~Timothy Crosley\n\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "Refactor",
          "Lint",
          "Imports",
          "Sort",
          "Clean"
        ],
        "home_page": "https://pycqa.github.io/isort/",
        "author": "Timothy Crosley",
        "author_email": "timothy.crosley@gmail.com",
        "license": "MIT",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "colorama (>=0.4.3) ; extra == \"colors\"",
          "pip-api ; extra == \"requirements-deprecated-finder\"",
          "pip-shims (>=0.5.2) ; extra == \"pipfile-deprecated-finder\"",
          "pipreqs ; extra == \"pipfile-deprecated-finder\" or extra == \"requirements-deprecated-finder\"",
          "requirementslib ; extra == \"pipfile-deprecated-finder\"",
          "setuptools ; extra == \"plugins\""
        ],
        "requires_python": ">=3.8.0",
        "project_url": [
          "Changelog, https://github.com/pycqa/isort/blob/main/CHANGELOG.md",
          "Documentation, https://pycqa.github.io/isort/",
          "Repository, https://github.com/pycqa/isort"
        ],
        "provides_extra": [
          "colors",
          "pipfile-deprecated-finder",
          "plugins",
          "requirements-deprecated-finder"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/66/51/6ef9d704c9d1f2197e2b966d0e50948879b97c6057f2652a9ba28e563c08/mypy-1.5.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=596fae69f2bfcb7305808c75c00f81fe2829b6236eadda536f00610ac5ec2243",
          "hashes": {
            "sha256": "596fae69f2bfcb7305808c75c00f81fe2829b6236eadda536f00610ac5ec2243"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "mypy",
        "version": "1.5.1",
        "summary": "Optional static typing for Python",
        "description": "Mypy -- Optional Static Typing for Python\n=========================================\n\nAdd type annotations to your Python programs, and use mypy to type\ncheck them.  Mypy is essentially a Python linter on steroids, and it\ncan catch many programming errors by analyzing your program, without\nactually having to run it.  Mypy has a powerful type system with\nfeatures such as type inference, gradual typing, generics and union\ntypes.\n",
        "home_page": "https://www.mypy-lang.org/",
        "author": "Jukka Lehtosalo",
        "author_email": "jukka.lehtosalo@iki.fi",
        "license": "MIT License",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Topic :: Software Development",
          "Typing :: Typed"
        ],
        "requires_dist": [
          "typing-extensions >=4.1.0",
          "mypy-extensions >=1.0.0",
          "tomli >=1.1.0 ; python_version < \"3.11\"",
          "psutil >=4.0 ; extra == 'dmypy'",
          "pip ; extra == 'install-types'",
          "lxml ; extra == 'reports'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "News, https://mypy-lang.org/news.html",
          "Documentation, https://mypy.readthedocs.io/en/stable/index.html",
          "Repository, https://github.com/python/mypy"
        ],
        "provides_extra": [
          "dmypy",
          "install-types",
          "python2",
          "reports"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/a6/54/f4fcf7113eb051a46476ecce9485c463f58dbc3887c06dbfe1e67a8ce7c0/sphinx-7.2.5-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=9269f9ed2821c9ebd30e4204f5c2339f5d4980e377bc89cb2cb6f9b17409c20a",
          "hashes": {
            "sha256": "9269f9ed2821c9ebd30e4204f5c2339f5d4980e377bc89cb2cb6f9b17409c20a"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "Sphinx",
        "version": "7.2.5",
        "summary": "Python documentation generator",
        "description": "========\n Sphinx\n========\n\n.. image:: https://img.shields.io/pypi/v/sphinx.svg\n   :target: https://pypi.org/project/Sphinx/\n   :alt: Package on PyPI\n\n.. image:: https://github.com/sphinx-doc/sphinx/actions/workflows/main.yml/badge.svg\n   :target: https://github.com/sphinx-doc/sphinx/actions/workflows/main.yml\n   :alt: Build Status\n\n.. image:: https://readthedocs.org/projects/sphinx/badge/?version=master\n   :target: https://www.sphinx-doc.org/\n   :alt: Documentation Status\n\n.. image:: https://img.shields.io/badge/License-BSD%202--Clause-blue.svg\n   :target: https://opensource.org/licenses/BSD-2-Clause\n   :alt: BSD 2 Clause\n\n**Sphinx makes it easy to create intelligent and beautiful documentation.**\n\nSphinx uses reStructuredText as its markup language, and many of its strengths\ncome from the power and straightforwardness of reStructuredText and its parsing\nand translating suite, the Docutils.\n\nFeatures\n========\n\n* **Output formats**: HTML, PDF, plain text, EPUB, TeX, manual pages, and more\n* **Extensive cross-references**: semantic markup and automatic links\n  for functions, classes, glossary terms and similar pieces of information\n* **Hierarchical structure**: easy definition of a document tree, with automatic\n  links to siblings, parents and children\n* **Automatic indices**: general index as well as a module index\n* **Code highlighting**: automatic highlighting using the Pygments highlighter\n* **Templating**: Flexible HTML output using the Jinja 2 templating engine\n* **Extension ecosystem**: Many extensions are available, for example for\n  automatic function documentation or working with Jupyter notebooks.\n* **Language Support**: Python, C, C++, JavaScript, mathematics, and many other\n  languages through extensions.\n\nFor more information, refer to the `the documentation`_.\n\nInstallation\n============\n\nThe following command installs Sphinx from the `Python Package Index`_. You will\nneed a working installation of Python and pip.\n\n.. code-block:: sh\n\n   pip install -U sphinx\n\nContributing\n============\n\nWe appreciate all contributions! Refer to `the contributors guide`_ for\ninformation.\n\n.. _the documentation: https://www.sphinx-doc.org/\n.. _the contributors guide: https://www.sphinx-doc.org/en/master/internals/contributing.html\n.. _Python Package Index: https://pypi.org/project/Sphinx/\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Georg Brandl <georg@python.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Intended Audience :: Education",
          "Intended Audience :: End Users/Desktop",
          "Intended Audience :: Science/Research",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Extension",
          "Framework :: Sphinx :: Theme",
          "Topic :: Documentation",
          "Topic :: Documentation :: Sphinx",
          "Topic :: Internet :: WWW/HTTP :: Site Management",
          "Topic :: Printing",
          "Topic :: Software Development",
          "Topic :: Software Development :: Documentation",
          "Topic :: Text Processing",
          "Topic :: Text Processing :: General",
          "Topic :: Text Processing :: Indexing",
          "Topic :: Text Processing :: Markup",
          "Topic :: Text Processing :: Markup :: HTML",
          "Topic :: Text Processing :: Markup :: LaTeX",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "sphinxcontrib-applehelp",
          "sphinxcontrib-devhelp",
          "sphinxcontrib-jsmath",
          "sphinxcontrib-htmlhelp>=2.0.0",
          "sphinxcontrib-serializinghtml>=1.1.9",
          "sphinxcontrib-qthelp",
          "Jinja2>=3.0",
          "Pygments>=2.14",
          "docutils>=0.18.1,<0.21",
          "snowballstemmer>=2.0",
          "babel>=2.9",
          "alabaster>=0.7,<0.8",
          "imagesize>=1.3",
          "requests>=2.25.0",
          "packaging>=21.0",
          "importlib-metadata>=4.8; python_version < '3.10'",
          "colorama>=0.4.5; sys_platform == 'win32'",
          "sphinxcontrib-websupport ; extra == \"docs\"",
          "flake8>=3.5.0 ; extra == \"lint\"",
          "flake8-simplify ; extra == \"lint\"",
          "isort ; extra == \"lint\"",
          "ruff ; extra == \"lint\"",
          "mypy>=0.990 ; extra == \"lint\"",
          "sphinx-lint ; extra == \"lint\"",
          "docutils-stubs ; extra == \"lint\"",
          "types-requests ; extra == \"lint\"",
          "pytest>=4.6 ; extra == \"test\"",
          "html5lib ; extra == \"test\"",
          "cython>=3.0 ; extra == \"test\"",
          "setuptools>=67.0 ; extra == \"test\"",
          "filelock ; extra == \"test\""
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Changelog, https://www.sphinx-doc.org/en/master/changes.html",
          "Code, https://github.com/sphinx-doc/sphinx",
          "Download, https://pypi.org/project/Sphinx/",
          "Homepage, https://www.sphinx-doc.org/",
          "Issue tracker, https://github.com/sphinx-doc/sphinx/issues"
        ],
        "provides_extra": [
          "docs",
          "lint",
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/18/01/76f40a18e9209bb098c1c1313c823dbbd001b23a2db71e7fd4eb5a48559c/sphinx_rtd_theme-1.3.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=46ddef89cc2416a81ecfbeaceab1881948c014b1b6e4450b815311a89fb977b0",
          "hashes": {
            "sha256": "46ddef89cc2416a81ecfbeaceab1881948c014b1b6e4450b815311a89fb977b0"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sphinx-rtd-theme",
        "version": "1.3.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Read the Docs theme for Sphinx",
        "description": "**************************\nRead the Docs Sphinx Theme\n**************************\n\n.. image:: https://img.shields.io/pypi/v/sphinx_rtd_theme.svg\n   :target: https://pypi.python.org/pypi/sphinx_rtd_theme\n   :alt: Pypi Version\n.. image:: https://circleci.com/gh/readthedocs/sphinx_rtd_theme.svg?style=svg\n   :alt: Build Status\n   :target: https://circleci.com/gh/readthedocs/sphinx_rtd_theme\n.. image:: https://img.shields.io/pypi/l/sphinx_rtd_theme.svg\n   :target: https://pypi.python.org/pypi/sphinx_rtd_theme/\n   :alt: License\n.. image:: https://readthedocs.org/projects/sphinx-rtd-theme/badge/?version=latest\n  :target: http://sphinx-rtd-theme.readthedocs.io/en/latest/?badge=latest\n  :alt: Documentation Status\n\nThis Sphinx_ theme was designed to provide a great reader experience for\ndocumentation users on both desktop and mobile devices. This theme is used\nprimarily on `Read the Docs`_ but can work with any Sphinx project. You can find\na working demo of the theme in the `theme documentation`_\n\n.. _Sphinx: http://www.sphinx-doc.org\n.. _Read the Docs: http://www.readthedocs.org\n.. _theme documentation: https://sphinx-rtd-theme.readthedocs.io/en/stable/\n\nInstallation\n============\n\nThis theme is distributed on PyPI_ and can be installed with ``pip``:\n\n.. code:: console\n\n   $ pip install sphinx-rtd-theme\n\nTo use the theme in your Sphinx project, you will need to edit\nyour ``conf.py`` file's ``html_theme`` setting:\n\n.. code:: python\n\n    html_theme = \"sphinx_rtd_theme\"\n\n.. admonition:: See also:\n\n    `Supported browsers`_\n        Officially supported and tested browser/operating system combinations\n\n    `Supported dependencies`_\n        Supported versions of Python, Sphinx, and other dependencies.\n\n    `Example documentation`_\n        A full example of this theme output, with localized strings enabled.\n\n.. _PyPI: https://pypi.python.org/pypi/sphinx_rtd_theme\n.. _Supported browsers: https://sphinx-rtd-theme.readthedocs.io/en/stable/development.html#supported-browsers\n.. _Supported dependencies: https://sphinx-rtd-theme.readthedocs.io/en/stable/development.html#supported-dependencies\n.. _Example documentation:  https://sphinx-rtd-theme.readthedocs.io/en/stable/\n\nConfiguration\n=============\n\nThis theme is highly customizable on both the page level and on a global level.\nTo see all the possible configuration options, read the documentation on\n`configuring the theme`_.\n\n.. _configuring the theme: https://sphinx-rtd-theme.readthedocs.io/en/stable/configuring.html\n\nContributing\n============\n\nIf you would like to help modify or translate the theme, you'll find more\ninformation on contributing in our `contributing guide`_.\n\n.. _contributing guide: https://sphinx-rtd-theme.readthedocs.io/en/stable/contributing.html\n\n\n",
        "home_page": "https://github.com/readthedocs/sphinx_rtd_theme",
        "author": "Dave Snider, Read the Docs, Inc. & contributors",
        "author_email": "dev@readthedocs.org",
        "license": "MIT",
        "classifier": [
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Theme",
          "Development Status :: 5 - Production/Stable",
          "License :: OSI Approved :: MIT License",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Operating System :: OS Independent",
          "Topic :: Documentation",
          "Topic :: Software Development :: Documentation"
        ],
        "requires_dist": [
          "sphinx (<8,>=1.6)",
          "docutils (<0.19)",
          "sphinxcontrib-jquery (<5,>=4)",
          "transifex-client ; extra == 'dev'",
          "sphinxcontrib-httpdomain ; extra == 'dev'",
          "bump2version ; extra == 'dev'",
          "wheel ; extra == 'dev'"
        ],
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,>=2.7",
        "project_url": [
          "Homepage, https://sphinx-rtd-theme.readthedocs.io/",
          "Source Code, https://github.com/readthedocs/sphinx_rtd_theme",
          "Issue Tracker, https://github.com/readthedocs/sphinx_rtd_theme/issues"
        ],
        "provides_extra": [
          "dev"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/64/88/c7083fc61120ab661c5d0b82cb77079fc1429d3f913a456c1c82cf4658f7/alabaster-0.7.13-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3",
          "hashes": {
            "sha256": "1ee19aca801bbabb5ba3f5f258e4422dfa86f82f3e9cefb0859b283cdd7f62a3"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "alabaster",
        "version": "0.7.13",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "A configurable sidebar-enabled Sphinx theme",
        "description": "|version| |python| |license| |ci|\n\n.. |version| image:: https://img.shields.io/pypi/v/alabaster\n    :target: https://pypi.org/project/alabaster/\n    :alt: PyPI - Package Version\n.. |python| image:: https://img.shields.io/pypi/pyversions/alabaster\n    :target: https://pypi.org/project/alabaster/\n    :alt: PyPI - Python Version\n.. |license| image:: https://img.shields.io/pypi/l/alabaster\n    :target: https://github.com/bitprophet/alabaster/blob/main/LICENSE\n    :alt: PyPI - License\n.. |ci| image:: https://img.shields.io/circleci/build/github/bitprophet/alabaster/main\n    :target: https://app.circleci.com/pipelines/github/bitprophet/alabaster\n    :alt: CircleCI\n\nWhat is Alabaster?\n==================\n\nAlabaster is a visually (c)lean, responsive, configurable theme for the `Sphinx\n<http://sphinx-doc.org>`_ documentation system. It is Python 3.6+ compatible.\n\nIt began as a third-party theme, and is still maintained separately, but as of\nSphinx 1.3, Alabaster is an install-time dependency of Sphinx and is selected\nas the default theme.\n\nLive examples of this theme can be seen on `this project's own website\n<http://alabaster.readthedocs.io>`_, `paramiko.org <http://paramiko.org>`_,\n`fabfile.org <http://fabfile.org>`_ and `pyinvoke.org <http://pyinvoke.org>`_.\n\nFor more documentation, please see http://alabaster.readthedocs.io. For a\nroadmap, see the maintainer's `roadmap page\n<http://bitprophet.org/projects#roadmap>`_.\n\n.. note::\n    You can install the development version via ``pip install -e\n    git+https://github.com/bitprophet/alabaster/#egg=alabaster``.\n\n\n",
        "home_page": "https://alabaster.readthedocs.io",
        "author": "Jeff Forcier",
        "author_email": "jeff@bitprophet.org",
        "license": "UNKNOWN",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Documentation",
          "Topic :: Software Development :: Documentation"
        ],
        "requires_python": ">=3.6",
        "project_url": [
          "Source, https://github.com/bitprophet/alabaster",
          "Changelog, https://github.com/bitprophet/alabaster/blob/main/docs/changelog.rst",
          "CI, https://app.circleci.com/pipelines/github/bitprophet/alabaster"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/df/c4/1088865e0246d7ecf56d819a233ab2b72f7d6ab043965ef327d0731b5434/Babel-2.12.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=b4246fb7677d3b98f501a39d43396d3cafdc8eadb045f4a31be01863f655c610",
          "hashes": {
            "sha256": "b4246fb7677d3b98f501a39d43396d3cafdc8eadb045f4a31be01863f655c610"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "Babel",
        "version": "2.12.1",
        "summary": "Internationalization utilities",
        "description": "A collection of tools for internationalizing Python applications.\n",
        "home_page": "https://babel.pocoo.org/",
        "author": "Armin Ronacher",
        "author_email": "armin.ronacher@active-4.com",
        "maintainer": "Aarni Koskela",
        "maintainer_email": "akx@iki.fi",
        "license": "BSD",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "pytz (>=2015.7) ; python_version < \"3.9\""
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Source, https://github.com/python-babel/babel"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/00/2e/d53fa4befbf2cfa713304affc7ca780ce4fc1fd8710527771b58311a3229/click-8.1.7-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28",
          "hashes": {
            "sha256": "ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "click",
        "version": "8.1.7",
        "summary": "Composable command line interface toolkit",
        "description": "\\$ click\\_\n==========\n\nClick is a Python package for creating beautiful command line interfaces\nin a composable way with as little code as necessary. It's the \"Command\nLine Interface Creation Kit\". It's highly configurable but comes with\nsensible defaults out of the box.\n\nIt aims to make the process of writing command line tools quick and fun\nwhile also preventing any frustration caused by the inability to\nimplement an intended CLI API.\n\nClick in three points:\n\n-   Arbitrary nesting of commands\n-   Automatic help page generation\n-   Supports lazy loading of subcommands at runtime\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    $ pip install -U click\n\n.. _pip: https://pip.pypa.io/en/stable/getting-started/\n\n\nA Simple Example\n----------------\n\n.. code-block:: python\n\n    import click\n\n    @click.command()\n    @click.option(\"--count\", default=1, help=\"Number of greetings.\")\n    @click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")\n    def hello(count, name):\n        \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n        for _ in range(count):\n            click.echo(f\"Hello, {name}!\")\n\n    if __name__ == '__main__':\n        hello()\n\n.. code-block:: text\n\n    $ python hello.py --count=3\n    Your name: Click\n    Hello, Click!\n    Hello, Click!\n    Hello, Click!\n\n\nDonate\n------\n\nThe Pallets organization develops and supports Click and other popular\npackages. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, `please\ndonate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nLinks\n-----\n\n-   Documentation: https://click.palletsprojects.com/\n-   Changes: https://click.palletsprojects.com/changes/\n-   PyPI Releases: https://pypi.org/project/click/\n-   Source Code: https://github.com/pallets/click\n-   Issue Tracker: https://github.com/pallets/click/issues\n-   Chat: https://discord.gg/pallets\n",
        "description_content_type": "text/x-rst",
        "home_page": "https://palletsprojects.com/p/click/",
        "maintainer": "Pallets",
        "maintainer_email": "contact@palletsprojects.com",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python"
        ],
        "requires_dist": [
          "colorama ; platform_system == \"Windows\"",
          "importlib-metadata ; python_version < \"3.8\""
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Donate, https://palletsprojects.com/donate",
          "Documentation, https://click.palletsprojects.com/",
          "Changes, https://click.palletsprojects.com/changes/",
          "Source Code, https://github.com/pallets/click/",
          "Issue Tracker, https://github.com/pallets/click/issues/",
          "Chat, https://discord.gg/pallets"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/8d/14/69b4bad34e3f250afe29a854da03acb6747711f3df06c359fa053fae4e76/docutils-0.18.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=23010f129180089fbcd3bc08cfefccb3b890b0050e1ca00c867036e9d161b98c",
          "hashes": {
            "sha256": "23010f129180089fbcd3bc08cfefccb3b890b0050e1ca00c867036e9d161b98c"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "docutils",
        "version": "0.18.1",
        "platform": [
          "OS-independent"
        ],
        "summary": "Docutils -- Python Documentation Utilities",
        "description": "Docutils is a modular system for processing documentation\ninto useful formats, such as HTML, XML, and LaTeX.  For\ninput Docutils supports reStructuredText, an easy-to-read,\nwhat-you-see-is-what-you-get plaintext markup syntax.\n\n",
        "home_page": "http://docutils.sourceforge.net/",
        "author": "David Goodger",
        "author_email": "goodger@python.org",
        "maintainer": "docutils-develop list",
        "maintainer_email": "docutils-develop@lists.sourceforge.net",
        "license": "public domain, Python, 2-Clause BSD, GPL 3 (see COPYING.txt)",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Environment :: Console",
          "Intended Audience :: End Users/Desktop",
          "Intended Audience :: Other Audience",
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "License :: Public Domain",
          "License :: OSI Approved :: Python Software Foundation License",
          "License :: OSI Approved :: BSD License",
          "License :: OSI Approved :: GNU General Public License (GPL)",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Documentation",
          "Topic :: Software Development :: Documentation",
          "Topic :: Text Processing",
          "Natural Language :: English",
          "Natural Language :: Afrikaans",
          "Natural Language :: Arabic",
          "Natural Language :: Catalan",
          "Natural Language :: Chinese (Simplified)",
          "Natural Language :: Chinese (Traditional)",
          "Natural Language :: Czech",
          "Natural Language :: Danish",
          "Natural Language :: Dutch",
          "Natural Language :: Esperanto",
          "Natural Language :: Finnish",
          "Natural Language :: French",
          "Natural Language :: Galician",
          "Natural Language :: German",
          "Natural Language :: Hebrew",
          "Natural Language :: Italian",
          "Natural Language :: Japanese",
          "Natural Language :: Korean",
          "Natural Language :: Latvian",
          "Natural Language :: Lithuanian",
          "Natural Language :: Persian",
          "Natural Language :: Polish",
          "Natural Language :: Portuguese (Brazilian)",
          "Natural Language :: Russian",
          "Natural Language :: Slovak",
          "Natural Language :: Spanish",
          "Natural Language :: Swedish"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ff/62/85c4c919272577931d407be5ba5d71c20f0b616d31a0befe0ae45bb79abd/imagesize-1.4.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b",
          "hashes": {
            "sha256": "0d8d18d08f840c19d0ee7ca1fd82490fdc3729b7ac93f49870406ddde8ef8d8b"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "imagesize",
        "version": "1.4.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Getting image size from png/jpeg/jpeg2000/gif file",
        "description": "\nIt parses image files' header and return image size.\n\n* PNG\n* JPEG\n* JPEG2000\n* GIF\n* TIFF\n* SVG\n* Netpbm\n* WebP\n\nThis is a pure Python library.\n\n\n",
        "home_page": "https://github.com/shibukawa/imagesize_py",
        "author": "Yoshiki Shibukawa",
        "author_email": "yoshiki@shibu.jp",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Multimedia :: Graphics"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/bc/c3/f068337a370801f372f2f8f6bad74a5c140f6fda3d9de154052708dd3c65/Jinja2-3.1.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61",
          "hashes": {
            "sha256": "6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "Jinja2",
        "version": "3.1.2",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "A very fast and expressive template engine.",
        "description": "Jinja\n=====\n\nJinja is a fast, expressive, extensible templating engine. Special\nplaceholders in the template allow writing code similar to Python\nsyntax. Then the template is passed data to render the final document.\n\nIt includes:\n\n-   Template inheritance and inclusion.\n-   Define and import macros within templates.\n-   HTML templates can use autoescaping to prevent XSS from untrusted\n    user input.\n-   A sandboxed environment can safely render untrusted templates.\n-   AsyncIO support for generating templates and calling async\n    functions.\n-   I18N support with Babel.\n-   Templates are compiled to optimized Python code just-in-time and\n    cached, or can be compiled ahead-of-time.\n-   Exceptions point to the correct line in templates to make debugging\n    easier.\n-   Extensible filters, tests, functions, and even syntax.\n\nJinja's philosophy is that while application logic belongs in Python if\npossible, it shouldn't make the template designer's job difficult by\nrestricting functionality too much.\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    $ pip install -U Jinja2\n\n.. _pip: https://pip.pypa.io/en/stable/getting-started/\n\n\nIn A Nutshell\n-------------\n\n.. code-block:: jinja\n\n    {% extends \"base.html\" %}\n    {% block title %}Members{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\n\nDonate\n------\n\nThe Pallets organization develops and supports Jinja and other popular\npackages. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, `please\ndonate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nLinks\n-----\n\n-   Documentation: https://jinja.palletsprojects.com/\n-   Changes: https://jinja.palletsprojects.com/changes/\n-   PyPI Releases: https://pypi.org/project/Jinja2/\n-   Source Code: https://github.com/pallets/jinja/\n-   Issue Tracker: https://github.com/pallets/jinja/issues/\n-   Website: https://palletsprojects.com/p/jinja/\n-   Twitter: https://twitter.com/PalletsTeam\n-   Chat: https://discord.gg/pallets\n\n\n",
        "description_content_type": "text/x-rst",
        "home_page": "https://palletsprojects.com/p/jinja/",
        "author": "Armin Ronacher",
        "author_email": "armin.ronacher@active-4.com",
        "maintainer": "Pallets",
        "maintainer_email": "contact@palletsprojects.com",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
          "Topic :: Text Processing :: Markup :: HTML"
        ],
        "requires_dist": [
          "MarkupSafe (>=2.0)",
          "Babel (>=2.7) ; extra == 'i18n'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Donate, https://palletsprojects.com/donate",
          "Documentation, https://jinja.palletsprojects.com/",
          "Changes, https://jinja.palletsprojects.com/changes/",
          "Source Code, https://github.com/pallets/jinja/",
          "Issue Tracker, https://github.com/pallets/jinja/issues/",
          "Twitter, https://twitter.com/PalletsTeam",
          "Chat, https://discord.gg/pallets"
        ],
        "provides_extra": [
          "i18n"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/27/1a/1f68f9ba0c207934b35b86a8ca3aad8395a3d6dd7921c0686e23853ff5a9/mccabe-0.7.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e",
          "hashes": {
            "sha256": "6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "mccabe",
        "version": "0.7.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "McCabe checker, plugin for flake8",
        "description": "McCabe complexity checker\n=========================\n\nNed's script to check McCabe complexity.\n\nThis module provides a plugin for ``flake8``, the Python code checker.\n\n\nInstallation\n------------\n\nYou can install, upgrade, or uninstall ``mccabe`` with these commands::\n\n  $ pip install mccabe\n  $ pip install --upgrade mccabe\n  $ pip uninstall mccabe\n\n\nStandalone script\n-----------------\n\nThe complexity checker can be used directly::\n\n  $ python -m mccabe --min 5 mccabe.py\n  (\"185:1: 'PathGraphingAstVisitor.visitIf'\", 5)\n  (\"71:1: 'PathGraph.to_dot'\", 5)\n  (\"245:1: 'McCabeChecker.run'\", 5)\n  (\"283:1: 'main'\", 7)\n  (\"203:1: 'PathGraphingAstVisitor.visitTryExcept'\", 5)\n  (\"257:1: 'get_code_complexity'\", 5)\n\n\nPlugin for Flake8\n-----------------\n\nWhen both ``flake8 2+`` and ``mccabe`` are installed, the plugin is\navailable in ``flake8``::\n\n  $ flake8 --version\n  2.0 (pep8: 1.4.2, pyflakes: 0.6.1, mccabe: 0.2)\n\nBy default the plugin is disabled.  Use the ``--max-complexity`` switch to\nenable it.  It will emit a warning if the McCabe complexity of a function is\nhigher than the provided value::\n\n    $ flake8 --max-complexity 10 coolproject\n    ...\n    coolproject/mod.py:1204:1: C901 'CoolFactory.prepare' is too complex (14)\n\nThis feature is quite useful for detecting over-complex code.  According to McCabe,\nanything that goes beyond 10 is too complex.\n\nFlake8 has many features that mccabe does not provide. Flake8 allows users to\nignore violations reported by plugins with ``# noqa``. Read more about this in\n`their documentation\n<http://flake8.pycqa.org/en/latest/user/violations.html#in-line-ignoring-errors>`__.\nTo silence violations reported by ``mccabe``, place your ``# noqa: C901`` on\nthe function definition line, where the error is reported for (possibly a\ndecorator).\n\n\nLinks\n-----\n\n* Feedback and ideas: http://mail.python.org/mailman/listinfo/code-quality\n\n* Cyclomatic complexity: http://en.wikipedia.org/wiki/Cyclomatic_complexity\n\n* Ned Batchelder's script:\n  http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html\n\n* McCabe complexity: http://en.wikipedia.org/wiki/Cyclomatic_complexity\n\n\nChanges\n-------\n\n0.7.0 - 2021-01-23\n``````````````````\n\n* Drop support for all versions of Python lower than 3.6\n\n* Add support for Python 3.8, 3.9, and 3.10\n\n* Fix option declaration for Flake8\n\n0.6.1 - 2017-01-26\n``````````````````\n\n* Fix signature for ``PathGraphingAstVisitor.default`` to match the signature\n  for ``ASTVisitor``\n\n0.6.0 - 2017-01-23\n``````````````````\n\n* Add support for Python 3.6\n\n* Fix handling for missing statement types\n\n0.5.3 - 2016-12-14\n``````````````````\n\n* Report actual column number of violation instead of the start of the line\n\n0.5.2 - 2016-07-31\n``````````````````\n\n* When opening files ourselves, make sure we always name the file variable\n\n0.5.1 - 2016-07-28\n``````````````````\n\n* Set default maximum complexity to -1 on the class itself\n\n0.5.0 - 2016-05-30\n``````````````````\n\n* PyCon 2016 PDX release\n\n* Add support for Flake8 3.0\n\n0.4.0 - 2016-01-27\n``````````````````\n\n* Stop testing on Python 3.2\n\n* Add support for async/await keywords on Python 3.5 from PEP 0492\n\n0.3.1 - 2015-06-14\n``````````````````\n\n* Include ``test_mccabe.py`` in releases.\n\n* Always coerce the ``max_complexity`` value from Flake8's entry-point to an\n  integer.\n\n0.3 - 2014-12-17\n````````````````\n\n* Computation was wrong: the mccabe complexity starts at 1, not 2.\n\n* The ``max-complexity`` value is now inclusive.  E.g.: if the\n  value is 10 and the reported complexity is 10, then it passes.\n\n* Add tests.\n\n\n0.2.1 - 2013-04-03\n``````````````````\n\n* Do not require ``setuptools`` in setup.py.  It works around an issue\n  with ``pip`` and Python 3.\n\n\n0.2 - 2013-02-22\n````````````````\n\n* Rename project to ``mccabe``.\n\n* Provide ``flake8.extension`` setuptools entry point.\n\n* Read ``max-complexity`` from the configuration file.\n\n* Rename argument ``min_complexity`` to ``threshold``.\n\n\n0.1 - 2013-02-11\n````````````````\n* First release\n\n\n",
        "keywords": [
          "flake8",
          "mccabe"
        ],
        "home_page": "https://github.com/pycqa/mccabe",
        "author": "Tarek Ziade",
        "author_email": "tarek@ziade.org",
        "maintainer": "Ian Stapleton Cordasco",
        "maintainer_email": "graffatcolmingov@gmail.com",
        "license": "Expat license",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Software Development :: Quality Assurance"
        ],
        "requires_python": ">=3.6"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/2a/e2/5d3f6ada4297caebe1a2add3b126fe800c96f56dbe5d1988a2cbe0b267aa/mypy_extensions-1.0.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d",
          "hashes": {
            "sha256": "4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "mypy-extensions",
        "version": "1.0.0",
        "summary": "Type system extensions for programs checked with the mypy type checker.",
        "description": "Mypy Extensions\n===============\n\nThe \"mypy_extensions\" module defines extensions to the standard \"typing\" module\nthat are supported by the mypy type checker and the mypyc compiler.\n",
        "home_page": "https://github.com/python/mypy_extensions",
        "author": "The mypy developers",
        "author_email": "jukka.lehtosalo@iki.fi",
        "license": "MIT License",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Topic :: Software Development"
        ],
        "requires_python": ">=3.5"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b4/2a/9b1be29146139ef459188f5e420a66e835dda921208db600b7037093891f/pathspec-0.11.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=1d6ed233af05e679efb96b1851550ea95bbb64b7c490b0f5aa52996c11e92a20",
          "hashes": {
            "sha256": "1d6ed233af05e679efb96b1851550ea95bbb64b7c490b0f5aa52996c11e92a20"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pathspec",
        "version": "0.11.2",
        "summary": "Utility library for gitignore style pattern matching of file paths.",
        "description": "\nPathSpec\n========\n\n*pathspec* is a utility library for pattern matching of file paths. So\nfar this only includes Git's wildmatch pattern matching which itself is\nderived from Rsync's wildmatch. Git uses wildmatch for its `gitignore`_\nfiles.\n\n.. _`gitignore`: http://git-scm.com/docs/gitignore\n\n\nTutorial\n--------\n\nSay you have a \"Projects\" directory and you want to back it up, but only\ncertain files, and ignore others depending on certain conditions::\n\n\t>>> import pathspec\n\t>>> # The gitignore-style patterns for files to select, but we're including\n\t>>> # instead of ignoring.\n\t>>> spec_text = \"\"\"\n\t...\n\t... # This is a comment because the line begins with a hash: \"#\"\n\t...\n\t... # Include several project directories (and all descendants) relative to\n\t... # the current directory. To reference a directory you must end with a\n\t... # slash: \"/\"\n\t... /project-a/\n\t... /project-b/\n\t... /project-c/\n\t...\n\t... # Patterns can be negated by prefixing with exclamation mark: \"!\"\n\t...\n\t... # Ignore temporary files beginning or ending with \"~\" and ending with\n\t... # \".swp\".\n\t... !~*\n\t... !*~\n\t... !*.swp\n\t...\n\t... # These are python projects so ignore compiled python files from\n\t... # testing.\n\t... !*.pyc\n\t...\n\t... # Ignore the build directories but only directly under the project\n\t... # directories.\n\t... !/*/build/\n\t...\n\t... \"\"\"\n\nWe want to use the ``GitWildMatchPattern`` class to compile our patterns. The\n``PathSpec`` class provides an interface around pattern implementations::\n\n\t>>> spec = pathspec.PathSpec.from_lines(pathspec.patterns.GitWildMatchPattern, spec_text.splitlines())\n\nThat may be a mouthful but it allows for additional patterns to be implemented\nin the future without them having to deal with anything but matching the paths\nsent to them. ``GitWildMatchPattern`` is the implementation of the actual\npattern which internally gets converted into a regular expression. ``PathSpec``\nis a simple wrapper around a list of compiled patterns.\n\nTo make things simpler, we can use the registered name for a pattern class\ninstead of always having to provide a reference to the class itself. The\n``GitWildMatchPattern`` class is registered as **gitwildmatch**::\n\n\t>>> spec = pathspec.PathSpec.from_lines('gitwildmatch', spec_text.splitlines())\n\nIf we wanted to manually compile the patterns we can just do the following::\n\n\t>>> patterns = map(pathspec.patterns.GitWildMatchPattern, spec_text.splitlines())\n\t>>> spec = PathSpec(patterns)\n\n``PathSpec.from_lines()`` is simply a class method which does just that.\n\nIf you want to load the patterns from file, you can pass the file instance\ndirectly as well::\n\n\t>>> with open('patterns.list', 'r') as fh:\n\t>>>     spec = pathspec.PathSpec.from_lines('gitwildmatch', fh)\n\nYou can perform matching on a whole directory tree with::\n\n\t>>> matches = spec.match_tree('path/to/directory')\n\nOr you can perform matching on a specific set of file paths with::\n\n\t>>> matches = spec.match_files(file_paths)\n\nOr check to see if an individual file matches::\n\n\t>>> is_matched = spec.match_file(file_path)\n\nThere is a specialized class, ``pathspec.GitIgnoreSpec``, which more closely\nimplements the behavior of **gitignore**. This uses ``GitWildMatchPattern``\npattern by default and handles some edge cases differently from the generic\n``PathSpec`` class. ``GitIgnoreSpec`` can be used without specifying the pattern\nfactory::\n\n\t>>> spec = pathspec.GitIgnoreSpec.from_lines(spec_text.splitlines())\n\n\nLicense\n-------\n\n*pathspec* is licensed under the `Mozilla Public License Version 2.0`_. See\n`LICENSE`_ or the `FAQ`_ for more information.\n\nIn summary, you may use *pathspec* with any closed or open source project\nwithout affecting the license of the larger work so long as you:\n\n- give credit where credit is due,\n\n- and release any custom changes made to *pathspec*.\n\n.. _`Mozilla Public License Version 2.0`: http://www.mozilla.org/MPL/2.0\n.. _`LICENSE`: LICENSE\n.. _`FAQ`: http://www.mozilla.org/MPL/2.0/FAQ.html\n\n\nSource\n------\n\nThe source code for *pathspec* is available from the GitHub repo\n`cpburnz/python-pathspec`_.\n\n.. _`cpburnz/python-pathspec`: https://github.com/cpburnz/python-pathspec\n\n\nInstallation\n------------\n\n*pathspec* is available for install through `PyPI`_::\n\n\tpip install pathspec\n\n*pathspec* can also be built from source. The following packages will be\nrequired:\n\n- `build`_ (>=0.6.0)\n\n*pathspec* can then be built and installed with::\n\n\tpython -m build\n\tpip install dist/pathspec-*-py3-none-any.whl\n\n.. _`PyPI`: http://pypi.python.org/pypi/pathspec\n.. _`build`: https://pypi.org/project/build/\n\n\nDocumentation\n-------------\n\nDocumentation for *pathspec* is available on `Read the Docs`_.\n\n.. _`Read the Docs`: https://python-path-specification.readthedocs.io\n\n\nOther Languages\n---------------\n\nThe related project `pathspec-ruby`_ (by *highb*) provides a similar library as\na `Ruby gem`_.\n\n.. _`pathspec-ruby`: https://github.com/highb/pathspec-ruby\n.. _`Ruby gem`: https://rubygems.org/gems/pathspec\n\n\n\nChange History\n==============\n\n\n0.11.2 (2023-07-28)\n-------------------\n\nNew features:\n\n- `Issue #80`_: match_files with negated path spec. `pathspec.PathSpec.match_*()` now have a `negate` parameter to make using *.gitignore* logic easier and more efficient.\n\nBug fixes:\n\n- `Pull #76`_: Add edge case: patterns that end with an escaped space\n- `Issue #77`_/`Pull #78`_: Negate with caret symbol as with the exclamation mark.\n\n\n.. _`Pull #76`: https://github.com/cpburnz/python-pathspec/pull/76\n.. _`Issue #77`: https://github.com/cpburnz/python-pathspec/issues/77\n.. _`Pull #78`: https://github.com/cpburnz/python-pathspec/pull/78/\n.. _`Issue #80`: https://github.com/cpburnz/python-pathspec/issues/80\n\n\n0.11.1 (2023-03-14)\n-------------------\n\nBug fixes:\n\n- `Issue #74`_: Include directory should override exclude file.\n\nImprovements:\n\n- `Pull #75`_: Fix partially unknown PathLike type.\n- Convert `os.PathLike` to a string properly using `os.fspath`.\n\n\n.. _`Issue #74`: https://github.com/cpburnz/python-pathspec/issues/74\n.. _`Pull #75`: https://github.com/cpburnz/python-pathspec/pull/75\n\n\n0.11.0 (2023-01-24)\n-------------------\n\nMajor changes:\n\n- Changed build backend to `flit_core.buildapi`_ from `setuptools.build_meta`_. Building with `setuptools` through `setup.py` is still supported for distributions that need it. See `Issue #72`_.\n\nImprovements:\n\n- `Issue #72`_/`Pull #73`_: Please consider switching the build-system to flit_core to ease setuptools bootstrap.\n\n\n.. _`flit_core.buildapi`: https://flit.pypa.io/en/latest/index.html\n.. _`Issue #72`: https://github.com/cpburnz/python-pathspec/issues/72\n.. _`Pull #73`: https://github.com/cpburnz/python-pathspec/pull/73\n\n\n0.10.3 (2022-12-09)\n-------------------\n\nNew features:\n\n- Added utility function `pathspec.util.append_dir_sep()` to aid in distinguishing between directories and files on the file-system. See `Issue #65`_.\n\nBug fixes:\n\n- `Issue #66`_/`Pull #67`_: Package not marked as py.typed.\n- `Issue #68`_: Exports are considered private.\n- `Issue #70`_/`Pull #71`_: 'Self' string literal type is Unknown in pyright.\n\nImprovements:\n\n- `Issue #65`_: Checking directories via match_file() does not work on Path objects.\n\n\n.. _`Issue #65`: https://github.com/cpburnz/python-pathspec/issues/65\n.. _`Issue #66`: https://github.com/cpburnz/python-pathspec/issues/66\n.. _`Pull #67`: https://github.com/cpburnz/python-pathspec/pull/67\n.. _`Issue #68`: https://github.com/cpburnz/python-pathspec/issues/68\n.. _`Issue #70`: https://github.com/cpburnz/python-pathspec/issues/70\n.. _`Pull #71`: https://github.com/cpburnz/python-pathspec/pull/71\n\n\n0.10.2 (2022-11-12)\n-------------------\n\nBug fixes:\n\n- Fix failing tests on Windows.\n- Type hint on *root* parameter on `pathspec.pathspec.PathSpec.match_tree_entries()`.\n- Type hint on *root* parameter on `pathspec.pathspec.PathSpec.match_tree_files()`.\n- Type hint on *root* parameter on `pathspec.util.iter_tree_entries()`.\n- Type hint on *root* parameter on `pathspec.util.iter_tree_files()`.\n- `Issue #64`_: IndexError with my .gitignore file when trying to build a Python package.\n\nImprovements:\n\n- `Pull #58`_: CI: add GitHub Actions test workflow.\n\n\n.. _`Pull #58`: https://github.com/cpburnz/python-pathspec/pull/58\n.. _`Issue #64`: https://github.com/cpburnz/python-pathspec/issues/64\n\n\n0.10.1 (2022-09-02)\n-------------------\n\nBug fixes:\n\n- Fix documentation on `pathspec.pattern.RegexPattern.match_file()`.\n- `Pull #60`_: Remove redundant wheel dep from pyproject.toml.\n- `Issue #61`_: Dist failure for Fedora, CentOS, EPEL.\n- `Issue #62`_: Since version 0.10.0 pure wildcard does not work in some cases.\n\nImprovements:\n\n- Restore support for legacy installations using `setup.py`. See `Issue #61`_.\n\n\n.. _`Pull #60`: https://github.com/cpburnz/python-pathspec/pull/60\n.. _`Issue #61`: https://github.com/cpburnz/python-pathspec/issues/61\n.. _`Issue #62`: https://github.com/cpburnz/python-pathspec/issues/62\n\n\n0.10.0 (2022-08-30)\n-------------------\n\nMajor changes:\n\n- Dropped support of EOL Python 2.7, 3.5, 3.6. See `Issue #47`_.\n- The *gitwildmatch* pattern `dir/*` is now handled the same as `dir/`. This means `dir/*` will now match all descendants rather than only direct children. See `Issue #19`_.\n- Added `pathspec.GitIgnoreSpec` class (see new features).\n- Changed build system to `pyproject.toml`_ and build backend to `setuptools.build_meta`_ which may have unforeseen consequences.\n- Renamed GitHub project from `python-path-specification`_ to `python-pathspec`_. See `Issue #35`_.\n\nAPI changes:\n\n- Deprecated: `pathspec.util.match_files()` is an old function no longer used.\n- Deprecated: `pathspec.match_files()` is an old function no longer used.\n- Deprecated: `pathspec.util.normalize_files()` is no longer used.\n- Deprecated: `pathspec.util.iter_tree()` is an alias for `pathspec.util.iter_tree_files()`.\n- Deprecated: `pathspec.iter_tree()` is an alias for `pathspec.util.iter_tree_files()`.\n-\tDeprecated: `pathspec.pattern.Pattern.match()` is no longer used. Use or implement\n\t`pathspec.pattern.Pattern.match_file()`.\n\nNew features:\n\n- Added class `pathspec.gitignore.GitIgnoreSpec` (with alias `pathspec.GitIgnoreSpec`) to implement *gitignore* behavior not possible with standard `PathSpec` class. The particular *gitignore* behavior implemented is prioritizing patterns matching the file directly over matching an ancestor directory.\n\nBug fixes:\n\n- `Issue #19`_: Files inside an ignored sub-directory are not matched.\n- `Issue #41`_: Incorrectly (?) matches files inside directories that do match.\n- `Pull #51`_: Refactor deprecated unittest aliases for Python 3.11 compatibility.\n- `Issue #53`_: Symlink pathspec_meta.py breaks Windows.\n- `Issue #54`_: test_util.py uses os.symlink which can fail on Windows.\n- `Issue #55`_: Backslashes at start of pattern not handled correctly.\n- `Pull #56`_: pyproject.toml: include subpackages in setuptools config\n- `Issue #57`_: `!` doesn't exclude files in directories if the pattern doesn't have a trailing slash.\n\nImprovements:\n\n- Support Python 3.10, 3.11.\n- Modernize code to Python 3.7.\n- `Issue #52`_: match_files() is not a pure generator function, and it impacts tree_*() gravely.\n\n\n.. _`python-path-specification`: https://github.com/cpburnz/python-path-specification\n.. _`python-pathspec`: https://github.com/cpburnz/python-pathspec\n.. _`pyproject.toml`: https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/\n.. _`setuptools.build_meta`: https://setuptools.pypa.io/en/latest/build_meta.html\n.. _`Issue #19`: https://github.com/cpburnz/python-pathspec/issues/19\n.. _`Issue #35`: https://github.com/cpburnz/python-pathspec/issues/35\n.. _`Issue #41`: https://github.com/cpburnz/python-pathspec/issues/41\n.. _`Issue #47`: https://github.com/cpburnz/python-pathspec/issues/47\n.. _`Pull #51`: https://github.com/cpburnz/python-pathspec/pull/51\n.. _`Issue #52`: https://github.com/cpburnz/python-pathspec/issues/52\n.. _`Issue #53`: https://github.com/cpburnz/python-pathspec/issues/53\n.. _`Issue #54`: https://github.com/cpburnz/python-pathspec/issues/54\n.. _`Issue #55`: https://github.com/cpburnz/python-pathspec/issues/55\n.. _`Pull #56`: https://github.com/cpburnz/python-pathspec/pull/56\n.. _`Issue #57`: https://github.com/cpburnz/python-pathspec/issues/57\n\n\n0.9.0 (2021-07-17)\n------------------\n\n- `Issue #44`_/`Pull #50`_: Raise `GitWildMatchPatternError` for invalid git patterns.\n- `Pull #45`_: Fix for duplicate leading double-asterisk, and edge cases.\n- `Issue #46`_: Fix matching absolute paths.\n- API change: `util.normalize_files()` now returns a `Dict[str, List[pathlike]]` instead of a `Dict[str, pathlike]`.\n- Added type hinting.\n\n.. _`Issue #44`: https://github.com/cpburnz/python-pathspec/issues/44\n.. _`Pull #45`: https://github.com/cpburnz/python-pathspec/pull/45\n.. _`Issue #46`: https://github.com/cpburnz/python-pathspec/issues/46\n.. _`Pull #50`: https://github.com/cpburnz/python-pathspec/pull/50\n\n\n0.8.1 (2020-11-07)\n------------------\n\n- `Pull #43`_: Add support for addition operator.\n\n.. _`Pull #43`: https://github.com/cpburnz/python-pathspec/pull/43\n\n\n0.8.0 (2020-04-09)\n------------------\n\n- `Issue #30`_: Expose what patterns matched paths. Added `util.detailed_match_files()`.\n- `Issue #31`_: `match_tree()` doesn't return symlinks.\n- `Issue #34`_: Support `pathlib.Path`\\ s.\n- Add `PathSpec.match_tree_entries` and `util.iter_tree_entries()` to support directories and symlinks.\n- API change: `match_tree()` has been renamed to `match_tree_files()`. The old name `match_tree()` is still available as an alias.\n- API change: `match_tree_files()` now returns symlinks. This is a bug fix but it will change the returned results.\n\n.. _`Issue #30`: https://github.com/cpburnz/python-pathspec/issues/30\n.. _`Issue #31`: https://github.com/cpburnz/python-pathspec/issues/31\n.. _`Issue #34`: https://github.com/cpburnz/python-pathspec/issues/34\n\n\n0.7.0 (2019-12-27)\n------------------\n\n- `Pull #28`_: Add support for Python 3.8, and drop Python 3.4.\n- `Pull #29`_: Publish bdist wheel.\n\n.. _`Pull #28`: https://github.com/cpburnz/python-pathspec/pull/28\n.. _`Pull #29`: https://github.com/cpburnz/python-pathspec/pull/29\n\n\n0.6.0 (2019-10-03)\n------------------\n\n- `Pull #24`_: Drop support for Python 2.6, 3.2, and 3.3.\n- `Pull #25`_: Update README.rst.\n- `Pull #26`_: Method to escape gitwildmatch.\n\n.. _`Pull #24`: https://github.com/cpburnz/python-pathspec/pull/24\n.. _`Pull #25`: https://github.com/cpburnz/python-pathspec/pull/25\n.. _`Pull #26`: https://github.com/cpburnz/python-pathspec/pull/26\n\n\n0.5.9 (2018-09-15)\n------------------\n\n- Fixed file system error handling.\n\n\n0.5.8 (2018-09-15)\n------------------\n\n- Improved type checking.\n- Created scripts to test Python 2.6 because Tox removed support for it.\n- Improved byte string handling in Python 3.\n- `Issue #22`_: Handle dangling symlinks.\n\n.. _`Issue #22`: https://github.com/cpburnz/python-pathspec/issues/22\n\n\n0.5.7 (2018-08-14)\n------------------\n\n- `Issue #21`_: Fix collections deprecation warning.\n\n.. _`Issue #21`: https://github.com/cpburnz/python-pathspec/issues/21\n\n\n0.5.6 (2018-04-06)\n------------------\n\n- Improved unit tests.\n- Improved type checking.\n- `Issue #20`_: Support current directory prefix.\n\n.. _`Issue #20`: https://github.com/cpburnz/python-pathspec/issues/20\n\n\n0.5.5 (2017-09-09)\n------------------\n\n- Add documentation link to README.\n\n\n0.5.4 (2017-09-09)\n------------------\n\n- `Pull #17`_: Add link to Ruby implementation of *pathspec*.\n- Add sphinx documentation.\n\n.. _`Pull #17`: https://github.com/cpburnz/python-pathspec/pull/17\n\n\n0.5.3 (2017-07-01)\n------------------\n\n- `Issue #14`_: Fix byte strings for Python 3.\n- `Pull #15`_: Include \"LICENSE\" in source package.\n- `Issue #16`_: Support Python 2.6.\n\n.. _`Issue #14`: https://github.com/cpburnz/python-pathspec/issues/14\n.. _`Pull #15`: https://github.com/cpburnz/python-pathspec/pull/15\n.. _`Issue #16`: https://github.com/cpburnz/python-pathspec/issues/16\n\n\n0.5.2 (2017-04-04)\n------------------\n\n- Fixed change log.\n\n\n0.5.1 (2017-04-04)\n------------------\n\n- `Pull #13`_: Add equality methods to `PathSpec` and `RegexPattern`.\n\n.. _`Pull #13`: https://github.com/cpburnz/python-pathspec/pull/13\n\n\n0.5.0 (2016-08-22)\n------------------\n\n- `Issue #12`_: Add `PathSpec.match_file()`.\n- Renamed `gitignore.GitIgnorePattern` to `patterns.gitwildmatch.GitWildMatchPattern`.\n- Deprecated `gitignore.GitIgnorePattern`.\n\n.. _`Issue #12`: https://github.com/cpburnz/python-pathspec/issues/12\n\n\n0.4.0 (2016-07-15)\n------------------\n\n- `Issue #11`_: Support converting patterns into regular expressions without compiling them.\n- API change: Subclasses of `RegexPattern` should implement `pattern_to_regex()`.\n\n.. _`Issue #11`: https://github.com/cpburnz/python-pathspec/issues/11\n\n\n0.3.4 (2015-08-24)\n------------------\n\n- `Pull #7`_: Fixed non-recursive links.\n- `Pull #8`_: Fixed edge cases in gitignore patterns.\n- `Pull #9`_: Fixed minor usage documentation.\n- Fixed recursion detection.\n- Fixed trivial incompatibility with Python 3.2.\n\n.. _`Pull #7`: https://github.com/cpburnz/python-pathspec/pull/7\n.. _`Pull #8`: https://github.com/cpburnz/python-pathspec/pull/8\n.. _`Pull #9`: https://github.com/cpburnz/python-pathspec/pull/9\n\n\n0.3.3 (2014-11-21)\n------------------\n\n- Improved documentation.\n\n\n0.3.2 (2014-11-08)\n------------------\n\n- `Pull #5`_: Use tox for testing.\n- `Issue #6`_: Fixed matching Windows paths.\n- Improved documentation.\n- API change: `spec.match_tree()` and `spec.match_files()` now return iterators instead of sets.\n\n.. _`Pull #5`: https://github.com/cpburnz/python-pathspec/pull/5\n.. _`Issue #6`: https://github.com/cpburnz/python-pathspec/issues/6\n\n\n0.3.1 (2014-09-17)\n------------------\n\n- Updated README.\n\n\n0.3.0 (2014-09-17)\n------------------\n\n- `Pull #3`_: Fixed trailing slash in gitignore patterns.\n- `Pull #4`_: Fixed test for trailing slash in gitignore patterns.\n- Added registered patterns.\n\n.. _`Pull #3`: https://github.com/cpburnz/python-pathspec/pull/3\n.. _`Pull #4`: https://github.com/cpburnz/python-pathspec/pull/4\n\n\n0.2.2 (2013-12-17)\n------------------\n\n- Fixed setup.py.\n\n\n0.2.1 (2013-12-17)\n------------------\n\n- Added tests.\n- Fixed comment gitignore patterns.\n- Fixed relative path gitignore patterns.\n\n\n0.2.0 (2013-12-07)\n------------------\n\n- Initial release.\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "\"Caleb P. Burns\" <cpburnz@gmail.com>",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Utilities"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Documentation, https://python-path-specification.readthedocs.io/en/latest/index.html",
          "Issue Tracker, https://github.com/cpburnz/python-pathspec/issues",
          "Source Code, https://github.com/cpburnz/python-pathspec"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/14/51/fe5a0d6ea589f0d4a1b97824fb518962ad48b27cd346dcdfa2405187997a/platformdirs-3.10.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=d7c24979f292f916dc9cbf8648319032f551ea8c49a4c9bf2fb556a02070ec1d",
          "hashes": {
            "sha256": "d7c24979f292f916dc9cbf8648319032f551ea8c49a4c9bf2fb556a02070ec1d"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "platformdirs",
        "version": "3.10.0",
        "summary": "A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\".",
        "description": "The problem\n===========\n\n.. image:: https://github.com/platformdirs/platformdirs/workflows/Test/badge.svg\n   :target: https://github.com/platformdirs/platformdirs/actions?query=workflow%3ATest\n\nWhen writing desktop application, finding the right location to store user data\nand configuration varies per platform. Even for single-platform apps, there\nmay by plenty of nuances in figuring out the right location.\n\nFor example, if running on macOS, you should use::\n\n    ~/Library/Application Support/<AppName>\n\nIf on Windows (at least English Win) that should be::\n\n    C:\\Documents and Settings\\<User>\\Application Data\\Local Settings\\<AppAuthor>\\<AppName>\n\nor possibly::\n\n    C:\\Documents and Settings\\<User>\\Application Data\\<AppAuthor>\\<AppName>\n\nfor `roaming profiles <https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-vista/cc766489(v=ws.10)>`_ but that is another story.\n\nOn Linux (and other Unices), according to the `XDG Basedir Spec`_, it should be::\n\n    ~/.local/share/<AppName>\n\n.. _XDG Basedir Spec: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\n``platformdirs`` to the rescue\n==============================\n\nThis kind of thing is what the ``platformdirs`` package is for.\n``platformdirs`` will help you choose an appropriate:\n\n- user data dir (``user_data_dir``)\n- user config dir (``user_config_dir``)\n- user cache dir (``user_cache_dir``)\n- site data dir (``site_data_dir``)\n- site config dir (``site_config_dir``)\n- user log dir (``user_log_dir``)\n- user documents dir (``user_documents_dir``)\n- user downloads dir (``user_downloads_dir``)\n- user pictures dir (``user_pictures_dir``)\n- user videos dir (``user_videos_dir``)\n- user music dir (``user_music_dir``)\n- user desktop dir (``user_desktop_dir``)\n- user runtime dir (``user_runtime_dir``)\n\nAnd also:\n\n- Is slightly opinionated on the directory names used. Look for \"OPINION\" in\n  documentation and code for when an opinion is being applied.\n\nExample output\n==============\n\nOn macOS:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/Users/trentm/Library/Application Support/SuperApp'\n    >>> site_data_dir(appname, appauthor)\n    '/Library/Application Support/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/Users/trentm/Library/Caches/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/Users/trentm/Library/Logs/SuperApp'\n    >>> user_documents_dir()\n    '/Users/trentm/Documents'\n    >>> user_downloads_dir()\n    '/Users/trentm/Downloads'\n    >>> user_pictures_dir()\n    '/Users/trentm/Pictures'\n    >>> user_videos_dir()\n    '/Users/trentm/Movies'\n    >>> user_music_dir()\n    '/Users/trentm/Music'\n    >>> user_desktop_dir()\n    '/Users/trentm/Desktop'\n    >>> user_runtime_dir(appname, appauthor)\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp'\n\nOn Windows:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp'\n    >>> user_data_dir(appname, appauthor, roaming=True)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Roaming\\\\Acme\\\\SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp\\\\Cache'\n    >>> user_log_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp\\\\Logs'\n    >>> user_documents_dir()\n    'C:\\\\Users\\\\trentm\\\\Documents'\n    >>> user_downloads_dir()\n    'C:\\\\Users\\\\trentm\\\\Downloads'\n    >>> user_pictures_dir()\n    'C:\\\\Users\\\\trentm\\\\Pictures'\n    >>> user_videos_dir()\n    'C:\\\\Users\\\\trentm\\\\Videos'\n    >>> user_music_dir()\n    'C:\\\\Users\\\\trentm\\\\Music'\n    >>> user_desktop_dir()\n    'C:\\\\Users\\\\trentm\\\\Desktop'\n    >>> user_runtime_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Temp\\\\Acme\\\\SuperApp'\n\nOn Linux:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/home/trentm/.local/share/SuperApp'\n    >>> site_data_dir(appname, appauthor)\n    '/usr/local/share/SuperApp'\n    >>> site_data_dir(appname, appauthor, multipath=True)\n    '/usr/local/share/SuperApp:/usr/share/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/home/trentm/.cache/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/home/trentm/.cache/SuperApp/log'\n    >>> user_config_dir(appname)\n    '/home/trentm/.config/SuperApp'\n    >>> user_documents_dir()\n    '/home/trentm/Documents'\n    >>> user_downloads_dir()\n    '/home/trentm/Downloads'\n    >>> user_pictures_dir()\n    '/home/trentm/Pictures'\n    >>> user_videos_dir()\n    '/home/trentm/Videos'\n    >>> user_music_dir()\n    '/home/trentm/Music'\n    >>> user_desktop_dir()\n    '/home/trentm/Desktop'\n    >>> user_runtime_dir(appname, appauthor)\n    '/run/user/{os.getuid()}/SuperApp'\n    >>> site_config_dir(appname)\n    '/etc/xdg/SuperApp'\n    >>> os.environ[\"XDG_CONFIG_DIRS\"] = \"/etc:/usr/local/etc\"\n    >>> site_config_dir(appname, multipath=True)\n    '/etc/SuperApp:/usr/local/etc/SuperApp'\n\nOn Android::\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/data/data/com.myApp/files/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp/log'\n    >>> user_config_dir(appname)\n    '/data/data/com.myApp/shared_prefs/SuperApp'\n    >>> user_documents_dir()\n    '/storage/emulated/0/Documents'\n    >>> user_downloads_dir()\n    '/storage/emulated/0/Downloads'\n    >>> user_pictures_dir()\n    '/storage/emulated/0/Pictures'\n    >>> user_videos_dir()\n    '/storage/emulated/0/DCIM/Camera'\n    >>> user_music_dir()\n    '/storage/emulated/0/Music'\n    >>> user_desktop_dir()\n    '/storage/emulated/0/Desktop'\n    >>> user_runtime_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp/tmp'\n\nNote: Some android apps like Termux and Pydroid are used as shells. These\napps are used by the end user to emulate Linux environment. Presence of\n``SHELL`` environment variable is used by Platformdirs to differentiate\nbetween general android apps and android apps used as shells. Shell android\napps also support ``XDG_*`` environment variables.\n\n\n``PlatformDirs`` for convenience\n================================\n\n.. code-block:: pycon\n\n    >>> from platformdirs import PlatformDirs\n    >>> dirs = PlatformDirs(\"SuperApp\", \"Acme\")\n    >>> dirs.user_data_dir\n    '/Users/trentm/Library/Application Support/SuperApp'\n    >>> dirs.site_data_dir\n    '/Library/Application Support/SuperApp'\n    >>> dirs.user_cache_dir\n    '/Users/trentm/Library/Caches/SuperApp'\n    >>> dirs.user_log_dir\n    '/Users/trentm/Library/Logs/SuperApp'\n    >>> dirs.user_documents_dir\n    '/Users/trentm/Documents'\n    >>> dirs.user_downloads_dir\n    '/Users/trentm/Downloads'\n    >>> dirs.user_pictures_dir\n    '/Users/trentm/Pictures'\n    >>> dirs.user_videos_dir\n    '/Users/trentm/Movies'\n    >>> dirs.user_music_dir\n    '/Users/trentm/Music'\n    >>> dirs.user_desktop_dir\n    '/Users/trentm/Desktop'\n    >>> dirs.user_runtime_dir\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp'\n\nPer-version isolation\n=====================\n\nIf you have multiple versions of your app in use that you want to be\nable to run side-by-side, then you may want version-isolation for these\ndirs::\n\n    >>> from platformdirs import PlatformDirs\n    >>> dirs = PlatformDirs(\"SuperApp\", \"Acme\", version=\"1.0\")\n    >>> dirs.user_data_dir\n    '/Users/trentm/Library/Application Support/SuperApp/1.0'\n    >>> dirs.site_data_dir\n    '/Library/Application Support/SuperApp/1.0'\n    >>> dirs.user_cache_dir\n    '/Users/trentm/Library/Caches/SuperApp/1.0'\n    >>> dirs.user_log_dir\n    '/Users/trentm/Library/Logs/SuperApp/1.0'\n    >>> dirs.user_documents_dir\n    '/Users/trentm/Documents'\n    >>> dirs.user_downloads_dir\n    '/Users/trentm/Downloads'\n    >>> dirs.user_pictures_dir\n    '/Users/trentm/Pictures'\n    >>> dirs.user_videos_dir\n    '/Users/trentm/Movies'\n    >>> dirs.user_music_dir\n    '/Users/trentm/Music'\n    >>> dirs.user_desktop_dir\n    '/Users/trentm/Desktop'\n    >>> dirs.user_runtime_dir\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp/1.0'\n\nBe wary of using this for configuration files though; you'll need to handle\nmigrating configuration files manually.\n\nWhy this Fork?\n==============\n\nThis repository is a friendly fork of the wonderful work started by\n`ActiveState <https://github.com/ActiveState/appdirs>`_ who created\n``appdirs``, this package's ancestor.\n\nMaintaining an open source project is no easy task, particularly\nfrom within an organization, and the Python community is indebted\nto ``appdirs`` (and to Trent Mick and Jeff Rouse in particular) for\ncreating an incredibly useful simple module, as evidenced by the wide\nnumber of users it has attracted over the years.\n\nNonetheless, given the number of long-standing open issues\nand pull requests, and no clear path towards `ensuring\nthat maintenance of the package would continue or grow\n<https://github.com/ActiveState/appdirs/issues/79>`_, this fork was\ncreated.\n\nContributions are most welcome.\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "appdirs",
          "application",
          "cache",
          "directory",
          "log",
          "user"
        ],
        "maintainer_email": "Bernát Gábor <gaborjbernat@gmail.com>, Julian Berman <Julian@GrayVines.com>, Ofek Lev <oss@ofek.dev>, Ronny Pfannschmidt <opensource@ronnypfannschmidt.de>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "typing-extensions>=4.7.1; python_version < '3.8'",
          "furo>=2023.7.26; extra == 'docs'",
          "proselint>=0.13; extra == 'docs'",
          "sphinx-autodoc-typehints>=1.24; extra == 'docs'",
          "sphinx>=7.1.1; extra == 'docs'",
          "appdirs==1.4.4; extra == 'test'",
          "covdefaults>=2.3; extra == 'test'",
          "pytest-cov>=4.1; extra == 'test'",
          "pytest-mock>=3.11.1; extra == 'test'",
          "pytest>=7.4; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Documentation, https://platformdirs.readthedocs.io",
          "Homepage, https://github.com/platformdirs/platformdirs",
          "Source, https://github.com/platformdirs/platformdirs",
          "Tracker, https://github.com/platformdirs/platformdirs/issues"
        ],
        "provides_extra": [
          "docs",
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/31/c2/e1508ed4395793f69e40fd8c6b5a690e1d568e649aae9492076a7b6befb4/pycodestyle-2.11.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=5d1013ba8dc7895b548be5afb05740ca82454fd899971563d2ef625d090326f8",
          "hashes": {
            "sha256": "5d1013ba8dc7895b548be5afb05740ca82454fd899971563d2ef625d090326f8"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pycodestyle",
        "version": "2.11.0",
        "summary": "Python style guide checker",
        "description": "pycodestyle (formerly called pep8) - Python style guide checker\n===============================================================\n\n.. image:: https://github.com/PyCQA/pycodestyle/actions/workflows/main.yml/badge.svg\n   :target: https://github.com/PyCQA/pycodestyle/actions/workflows/main.yml\n   :alt: Build status\n\n.. image:: https://readthedocs.org/projects/pycodestyle/badge/?version=latest\n    :target: https://pycodestyle.pycqa.org\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/wheel/pycodestyle.svg\n   :target: https://pypi.org/project/pycodestyle/\n   :alt: Wheel Status\n\n.. image:: https://badges.gitter.im/PyCQA/pycodestyle.svg\n   :alt: Join the chat at https://gitter.im/PyCQA/pycodestyle\n   :target: https://gitter.im/PyCQA/pycodestyle?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\npycodestyle is a tool to check your Python code against some of the style\nconventions in `PEP 8`_.\n\n.. _PEP 8: http://www.python.org/dev/peps/pep-0008/\n\n.. note::\n\n    This package used to be called ``pep8`` but was renamed to ``pycodestyle``\n    to reduce confusion. Further discussion can be found `in the issue where\n    Guido requested this\n    change <https://github.com/PyCQA/pycodestyle/issues/466>`_, or in the\n    lightning talk at PyCon 2016 by @IanLee1521:\n    `slides <https://speakerdeck.com/ianlee1521/pep8-vs-pep-8>`_\n    `video <https://youtu.be/PulzIT8KYLk?t=36m>`_.\n\nFeatures\n--------\n\n* Plugin architecture: Adding new checks is easy.\n\n* Parseable output: Jump to error location in your editor.\n\n* Small: Just one Python file, requires only stdlib. You can use just\n  the ``pycodestyle.py`` file for this purpose.\n\n* Comes with a comprehensive test suite.\n\nInstallation\n------------\n\nYou can install, upgrade, and uninstall ``pycodestyle.py`` with these commands::\n\n  $ pip install pycodestyle\n  $ pip install --upgrade pycodestyle\n  $ pip uninstall pycodestyle\n\nThere's also a package for Debian/Ubuntu, but it's not always the\nlatest version.\n\nExample usage and output\n------------------------\n\n::\n\n  $ pycodestyle --first optparse.py\n  optparse.py:69:11: E401 multiple imports on one line\n  optparse.py:77:1: E302 expected 2 blank lines, found 1\n  optparse.py:88:5: E301 expected 1 blank line, found 0\n  optparse.py:347:31: E211 whitespace before '('\n  optparse.py:357:17: E201 whitespace after '{'\n  optparse.py:472:29: E221 multiple spaces before operator\n\nYou can also make ``pycodestyle.py`` show the source code for each error, and\neven the relevant text from PEP 8::\n\n  $ pycodestyle --show-source --show-pep8 testing/data/E40.py\n  testing/data/E40.py:2:10: E401 multiple imports on one line\n  import os, sys\n           ^\n      Imports should usually be on separate lines.\n\n      Okay: import os\\nimport sys\n      E401: import sys, os\n\n\nOr you can display how often each error was found::\n\n  $ pycodestyle --statistics -qq Python-2.5/Lib\n  232     E201 whitespace after '['\n  599     E202 whitespace before ')'\n  631     E203 whitespace before ','\n  842     E211 whitespace before '('\n  2531    E221 multiple spaces before operator\n  4473    E301 expected 1 blank line, found 0\n  4006    E302 expected 2 blank lines, found 1\n  165     E303 too many blank lines (4)\n  325     E401 multiple imports on one line\n  3615    E501 line too long (82 characters)\n\nLinks\n-----\n\n* `Read the documentation <https://pycodestyle.pycqa.org/>`_\n\n* `Fork me on GitHub <http://github.com/PyCQA/pycodestyle>`_\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "pycodestyle",
          "pep8",
          "PEP 8",
          "PEP-8",
          "PEP8"
        ],
        "home_page": "https://pycodestyle.pycqa.org/",
        "author": "Johann C. Rocholl",
        "author_email": "johann@rocholl.net",
        "maintainer": "Ian Lee",
        "maintainer_email": "IanLee1521@gmail.com",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Changes, https://pycodestyle.pycqa.org/en/latest/developer.html#changes"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/00/e9/1e1fd7fae559bfd07704991e9a59dd1349b72423c904256c073ce88a9940/pyflakes-3.1.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=4132f6d49cb4dae6819e5379898f2b8cce3c5f23994194c24b77d5da2e36f774",
          "hashes": {
            "sha256": "4132f6d49cb4dae6819e5379898f2b8cce3c5f23994194c24b77d5da2e36f774"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pyflakes",
        "version": "3.1.0",
        "summary": "passive checker of Python programs",
        "description": "========\nPyflakes\n========\n\nA simple program which checks Python source files for errors.\n\nPyflakes analyzes programs and detects various errors.  It works by\nparsing the source file, not importing it, so it is safe to use on\nmodules with side effects.  It's also much faster.\n\nIt is `available on PyPI <https://pypi.org/project/pyflakes/>`_\nand it supports all active versions of Python: 3.6+.\n\n\n\nInstallation\n------------\n\nIt can be installed with::\n\n  $ pip install --upgrade pyflakes\n\n\nUseful tips:\n\n* Be sure to install it for a version of Python which is compatible\n  with your codebase: ``python#.# -m pip install pyflakes`` (for example,\n  ``python3.10 -m pip install pyflakes``)\n\n* You can also invoke Pyflakes with ``python#.# -m pyflakes .`` if you want\n  to run it for a specific python version.\n\n* If you require more options and more flexibility, you could give a\n  look to Flake8_ too.\n\n\nDesign Principles\n-----------------\nPyflakes makes a simple promise: it will never complain about style,\nand it will try very, very hard to never emit false positives.\n\nPyflakes is also faster than Pylint_. This is\nlargely because Pyflakes only examines the syntax tree of each file\nindividually. As a consequence, Pyflakes is more limited in the\ntypes of things it can check.\n\nIf you like Pyflakes but also want stylistic checks, you want\nflake8_, which combines\nPyflakes with style checks against\n`PEP 8`_ and adds\nper-project configuration ability.\n\n\nMailing-list\n------------\n\nShare your feedback and ideas: `subscribe to the mailing-list\n<https://mail.python.org/mailman/listinfo/code-quality>`_\n\nContributing\n------------\n\nIssues are tracked on `GitHub <https://github.com/PyCQA/pyflakes/issues>`_.\n\nPatches may be submitted via a `GitHub pull request`_.\nIf you are comfortable doing so, please `rebase your changes`_\nso they may be applied to main with a fast-forward merge, and each commit is\na coherent unit of work with a well-written log message.  If you are not\ncomfortable with this rebase workflow, the project maintainers will be happy to\nrebase your commits for you.\n\nAll changes should include tests and pass flake8_.\n\n.. image:: https://github.com/PyCQA/pyflakes/workflows/Test/badge.svg\n   :target: https://github.com/PyCQA/pyflakes/actions\n   :alt: GitHub Actions build status\n\n.. _Pylint: https://pylint.pycqa.org/\n.. _flake8: https://pypi.org/project/flake8/\n.. _`PEP 8`: https://www.python.org/dev/peps/pep-0008/\n.. _`rebase your changes`: https://git-scm.com/book/en/v2/Git-Branching-Rebasing\n.. _`GitHub pull request`: https://github.com/PyCQA/pyflakes/pulls\n\nChangelog\n---------\n\nPlease see `NEWS.rst <https://github.com/PyCQA/pyflakes/blob/main/NEWS.rst>`_.\n",
        "home_page": "https://github.com/PyCQA/pyflakes",
        "author": "A lot of people",
        "author_email": "code-quality@python.org",
        "license": "MIT",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development",
          "Topic :: Utilities"
        ],
        "requires_python": ">=3.8"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/43/88/29adf0b44ba6ac85045e63734ae0997d3c58d8b1a91c914d240828d0d73d/Pygments-2.16.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=13fc09fa63bc8d8671a6d247e1eb303c4b343eaee81d861f3404db2935653692",
          "hashes": {
            "sha256": "13fc09fa63bc8d8671a6d247e1eb303c4b343eaee81d861f3404db2935653692"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "Pygments",
        "version": "2.16.1",
        "summary": "Pygments is a syntax highlighting package written in Python.",
        "description": "Pygments\n~~~~~~~~\n\nPygments is a syntax highlighting package written in Python.\n\nIt is a generic syntax highlighter suitable for use in code hosting, forums,\nwikis or other applications that need to prettify source code.  Highlights\nare:\n\n* a wide range of over 500 languages and other text formats is supported\n* special attention is paid to details, increasing quality by a fair amount\n* support for new languages and formats are added easily\n* a number of output formats, presently HTML, LaTeX, RTF, SVG, all image\n  formats that PIL supports and ANSI sequences\n* it is usable as a command-line tool and as a library\n\nCopyright 2006-2023 by the Pygments team, see ``AUTHORS``.\nLicensed under the BSD, see ``LICENSE`` for details.\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "syntax",
          "highlighting"
        ],
        "author_email": "Georg Brandl <georg@python.org>",
        "maintainer": "Matthäus G. Chajdas",
        "maintainer_email": "Georg Brandl <georg@python.org>, Jean Abou Samra <jean@abou-samra.fr>",
        "license": "BSD-2-Clause",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Intended Audience :: Developers",
          "Intended Audience :: End Users/Desktop",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Text Processing :: Filters",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "importlib-metadata ; (python_version < \"3.8\") and extra == 'plugins'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, https://pygments.org",
          "Documentation, https://pygments.org/docs",
          "Source, https://github.com/pygments/pygments",
          "Bug Tracker, https://github.com/pygments/pygments/issues",
          "Changelog, https://github.com/pygments/pygments/blob/master/CHANGES"
        ],
        "provides_extra": [
          "plugins"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/70/8e/0e2d847013cb52cd35b38c009bb167a1a26b2ce6cd6965bf26b47bc0bf44/requests-2.31.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f",
          "hashes": {
            "sha256": "58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "requests",
        "version": "2.31.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Python HTTP for Humans.",
        "description": "# Requests\n\n**Requests** is a simple, yet elegant, HTTP library.\n\n```python\n>>> import requests\n>>> r = requests.get('https://httpbin.org/basic-auth/user/pass', auth=('user', 'pass'))\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'application/json; charset=utf8'\n>>> r.encoding\n'utf-8'\n>>> r.text\n'{\"authenticated\": true, ...'\n>>> r.json()\n{'authenticated': True, ...}\n```\n\nRequests allows you to send HTTP/1.1 requests extremely easily. There’s no need to manually add query strings to your URLs, or to form-encode your `PUT` & `POST` data — but nowadays, just use the `json` method!\n\nRequests is one of the most downloaded Python packages today, pulling in around `30M downloads / week`— according to GitHub, Requests is currently [depended upon](https://github.com/psf/requests/network/dependents?package_id=UGFja2FnZS01NzA4OTExNg%3D%3D) by `1,000,000+` repositories. You may certainly put your trust in this code.\n\n[![Downloads](https://pepy.tech/badge/requests/month)](https://pepy.tech/project/requests)\n[![Supported Versions](https://img.shields.io/pypi/pyversions/requests.svg)](https://pypi.org/project/requests)\n[![Contributors](https://img.shields.io/github/contributors/psf/requests.svg)](https://github.com/psf/requests/graphs/contributors)\n\n## Installing Requests and Supported Versions\n\nRequests is available on PyPI:\n\n```console\n$ python -m pip install requests\n```\n\nRequests officially supports Python 3.7+.\n\n## Supported Features & Best–Practices\n\nRequests is ready for the demands of building robust and reliable HTTP–speaking applications, for the needs of today.\n\n- Keep-Alive & Connection Pooling\n- International Domains and URLs\n- Sessions with Cookie Persistence\n- Browser-style TLS/SSL Verification\n- Basic & Digest Authentication\n- Familiar `dict`–like Cookies\n- Automatic Content Decompression and Decoding\n- Multi-part File Uploads\n- SOCKS Proxy Support\n- Connection Timeouts\n- Streaming Downloads\n- Automatic honoring of `.netrc`\n- Chunked HTTP Requests\n\n## API Reference and User Guide available on [Read the Docs](https://requests.readthedocs.io)\n\n[![Read the Docs](https://raw.githubusercontent.com/psf/requests/main/ext/ss.png)](https://requests.readthedocs.io)\n\n## Cloning the repository\n\nWhen cloning the Requests repository, you may need to add the `-c\nfetch.fsck.badTimezone=ignore` flag to avoid an error about a bad commit (see\n[this issue](https://github.com/psf/requests/issues/2690) for more background):\n\n```shell\ngit clone -c fetch.fsck.badTimezone=ignore https://github.com/psf/requests.git\n```\n\nYou can also apply this setting to your global Git config:\n\n```shell\ngit config --global fetch.fsck.badTimezone ignore\n```\n\n---\n\n[![Kenneth Reitz](https://raw.githubusercontent.com/psf/requests/main/ext/kr.png)](https://kennethreitz.org) [![Python Software Foundation](https://raw.githubusercontent.com/psf/requests/main/ext/psf.png)](https://www.python.org/psf)\n\n\n",
        "description_content_type": "text/markdown",
        "home_page": "https://requests.readthedocs.io",
        "author": "Kenneth Reitz",
        "author_email": "me@kennethreitz.org",
        "license": "Apache 2.0",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Natural Language :: English",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: WWW/HTTP",
          "Topic :: Software Development :: Libraries"
        ],
        "requires_dist": [
          "charset-normalizer (<4,>=2)",
          "idna (<4,>=2.5)",
          "urllib3 (<3,>=1.21.1)",
          "certifi (>=2017.4.17)",
          "PySocks (!=1.5.7,>=1.5.6) ; extra == 'socks'",
          "chardet (<6,>=3.0.2) ; extra == 'use_chardet_on_py3'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Documentation, https://requests.readthedocs.io",
          "Source, https://github.com/psf/requests"
        ],
        "provides_extra": [
          "security",
          "socks",
          "use_chardet_on_py3"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ed/dc/c02e01294f7265e63a7315fe086dd1df7dacb9f840a804da846b96d01b96/snowballstemmer-2.2.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=c8e1716e83cc398ae16824e5572ae04e0d9fc2c6b985fb0f900f5f0c96ecba1a",
          "hashes": {
            "sha256": "c8e1716e83cc398ae16824e5572ae04e0d9fc2c6b985fb0f900f5f0c96ecba1a"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "snowballstemmer",
        "version": "2.2.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "This package provides 29 stemmers for 28 languages generated from Snowball algorithms.",
        "description": "Snowball stemming library collection for Python\n===============================================\n\nPython 3 (>= 3.3) is supported.  We no longer actively support Python 2 as\nthe Python developers stopped supporting it at the start of 2020.  Snowball\n2.1.0 was the last release to officially support Python 2.\n\nWhat is Stemming?\n-----------------\n\nStemming maps different forms of the same word to a common \"stem\" - for\nexample, the English stemmer maps *connection*, *connections*, *connective*,\n*connected*, and *connecting* to *connect*.  So a searching for *connected*\nwould also find documents which only have the other forms.\n\nThis stem form is often a word itself, but this is not always the case as this\nis not a requirement for text search systems, which are the intended field of\nuse.  We also aim to conflate words with the same meaning, rather than all\nwords with a common linguistic root (so *awe* and *awful* don't have the same\nstem), and over-stemming is more problematic than under-stemming so we tend not\nto stem in cases that are hard to resolve.  If you want to always reduce words\nto a root form and/or get a root form which is itself a word then Snowball's\nstemming algorithms likely aren't the right answer.\n\nHow to use library\n------------------\n\nThe ``snowballstemmer`` module has two functions.\n\nThe ``snowballstemmer.algorithms`` function returns a list of available\nalgorithm names.\n\nThe ``snowballstemmer.stemmer`` function takes an algorithm name and returns a\n``Stemmer`` object.\n\n``Stemmer`` objects have a ``Stemmer.stemWord(word)`` method and a\n``Stemmer.stemWords(word[])`` method.\n\n.. code-block:: python\n\n   import snowballstemmer\n\n   stemmer = snowballstemmer.stemmer('english');\n   print(stemmer.stemWords(\"We are the world\".split()));\n\nAutomatic Acceleration\n----------------------\n\n`PyStemmer <https://pypi.org/project/PyStemmer/>`_ is a wrapper module for\nSnowball's ``libstemmer_c`` and should provide results 100% compatible to\n**snowballstemmer**.\n\n**PyStemmer** is faster because it wraps generated C versions of the stemmers;\n**snowballstemmer** uses generate Python code and is slower but offers a pure\nPython solution.\n\nIf PyStemmer is installed, ``snowballstemmer.stemmer`` returns a ``PyStemmer``\n``Stemmer`` object which provides the same ``Stemmer.stemWord()`` and\n``Stemmer.stemWords()`` methods.\n\nBenchmark\n~~~~~~~~~\n\nThis is a crude benchmark which measures the time for running each stemmer on\nevery word in its sample vocabulary (10,787,583 words over 26 languages).  It's\nnot a realistic test of normal use as a real application would do much more\nthan just stemming.  It's also skewed towards the stemmers which do more work\nper word and towards those with larger sample vocabularies.\n\n* Python 2.7 + **snowballstemmer** : 13m00s (15.0 * PyStemmer)\n* Python 3.7 + **snowballstemmer** : 12m19s (14.2 * PyStemmer)\n* PyPy 7.1.1 (Python 2.7.13) + **snowballstemmer** : 2m14s (2.6 * PyStemmer)\n* PyPy 7.1.1 (Python 3.6.1) + **snowballstemmer** : 1m46s (2.0 * PyStemmer)\n* Python 2.7 + **PyStemmer** : 52s\n\nFor reference the equivalent test for C runs in 9 seconds.\n\nThese results are for Snowball 2.0.0.  They're likely to evolve over time as\nthe code Snowball generates for both Python and C continues to improve (for\na much older test over a different set of stemmers using Python 2.7,\n**snowballstemmer** was 30 times slower than **PyStemmer**, or 9 times slower\nwith **PyPy**).\n\nThe message to take away is that if you're stemming a lot of words you should\neither install **PyStemmer** (which **snowballstemmer** will then automatically\nuse for you as described above) or use PyPy.\n\nThe TestApp example\n-------------------\n\nThe ``testapp.py`` example program allows you to run any of the stemmers\non a sample vocabulary.\n\nUsage::\n\n   testapp.py <algorithm> \"sentences ... \"\n\n.. code-block:: bash\n\n   $ python testapp.py English \"sentences... \"\n\n\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "stemmer"
        ],
        "home_page": "https://github.com/snowballstem/snowball",
        "author": "Snowball Developers",
        "author_email": "snowball-discuss@lists.tartarus.org",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Natural Language :: Arabic",
          "Natural Language :: Basque",
          "Natural Language :: Catalan",
          "Natural Language :: Danish",
          "Natural Language :: Dutch",
          "Natural Language :: English",
          "Natural Language :: Finnish",
          "Natural Language :: French",
          "Natural Language :: German",
          "Natural Language :: Greek",
          "Natural Language :: Hindi",
          "Natural Language :: Hungarian",
          "Natural Language :: Indonesian",
          "Natural Language :: Irish",
          "Natural Language :: Italian",
          "Natural Language :: Lithuanian",
          "Natural Language :: Nepali",
          "Natural Language :: Norwegian",
          "Natural Language :: Portuguese",
          "Natural Language :: Romanian",
          "Natural Language :: Russian",
          "Natural Language :: Serbian",
          "Natural Language :: Spanish",
          "Natural Language :: Swedish",
          "Natural Language :: Tamil",
          "Natural Language :: Turkish",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.6",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Database",
          "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
          "Topic :: Text Processing :: Indexing",
          "Topic :: Text Processing :: Linguistic"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/28/7a/958f8e3e6abe8219d0d1f1224886de847ab227b218f4a07b61bc337f64be/sphinxcontrib_htmlhelp-2.0.4-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8001661c077a73c29beaf4a79968d0726103c5605e27db92b9ebed8bab1359e9",
          "hashes": {
            "sha256": "8001661c077a73c29beaf4a79968d0726103c5605e27db92b9ebed8bab1359e9"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sphinxcontrib-htmlhelp",
        "version": "2.0.4",
        "summary": "sphinxcontrib-htmlhelp is a sphinx extension which renders HTML help files",
        "description": "======================\nsphinxcontrib-htmlhelp\n======================\n\nsphinxcontrib-htmlhelp is a sphinx extension which renders HTML help files.\n\nFor more details, please visit http://www.sphinx-doc.org/.\n\nInstalling\n==========\n\nInstall from PyPI::\n\n   pip install -U sphinxcontrib-htmlhelp\n\nContributing\n============\n\nSee `CONTRIBUTING.rst`__\n\n.. __: https://github.com/sphinx-doc/sphinx/blob/master/CONTRIBUTING.rst\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Georg Brandl <georg@python.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Intended Audience :: Education",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Extension",
          "Topic :: Documentation",
          "Topic :: Documentation :: Sphinx",
          "Topic :: Text Processing",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "Sphinx>=5",
          "flake8 ; extra == \"lint\"",
          "mypy ; extra == \"lint\"",
          "docutils-stubs ; extra == \"lint\"",
          "pytest ; extra == \"test\"",
          "html5lib ; extra == \"test\""
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Changelog, https://www.sphinx-doc.org/en/master/changes.html",
          "Code, https://github.com/sphinx-doc/sphinxcontrib-htmlhelp",
          "Download, https://pypi.org/project/sphinxcontrib-htmlhelp/",
          "Homepage, https://www.sphinx-doc.org/",
          "Issue tracker, https://github.com/sphinx-doc/sphinx/issues"
        ],
        "provides_extra": [
          "lint",
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/76/85/749bd22d1a68db7291c89e2ebca53f4306c3f205853cf31e9de279034c3c/sphinxcontrib_jquery-4.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f936030d7d0147dd026a4f2b5a57343d233f1fc7b363f68b3d4f1cb0993878ae",
          "hashes": {
            "sha256": "f936030d7d0147dd026a4f2b5a57343d233f1fc7b363f68b3d4f1cb0993878ae"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sphinxcontrib-jquery",
        "version": "4.1",
        "summary": "Extension to include jQuery on newer Sphinx releases",
        "description": "======================\n sphinxcontrib-jquery\n======================\n\n.. image:: https://img.shields.io/pypi/v/sphinxcontrib-jquery.svg\n   :target: https://pypi.org/project/sphinxcontrib-jquery/\n   :alt: Package on PyPI\n\n``sphinxcontrib-jquery`` ensures that jQuery is always installed for use in\nSphinx themes or extensions.\n\nTo use it, add ``sphinxcontrib.jquery`` as a Sphinx extension:\n\n.. code:: python\n\n   # conf.py\n\n   extensions = [\n       \"sphinxcontrib.jquery\",\n   ]\n   ...\n\n\nConfiguration\n-------------\n\n.. As this is a README, we restrict the directives we use to those which GitHub\n   renders correctly. This means that we cannot use ``versionadded``,\n   ``confval``, ``warning``, or other similar directives.\n   We use a reStructuredText definition list to emulate the ``confval``\n   rendering.\n   We use inline **bold** syntax as a poor-man's ``.. warning::`` directive.\n\n``jquery_use_sri``\n   A boolean value controlling whether to enable  `subresource integrity`_ (SRI)\n   checks for JavaScript files that this extension loads.\n\n   The default is ``False``.\n\n   **Warning**: Enabling SRI checks may break documentation when loaded from\n   local filesystem (``file:///`` URIs).\n\n   *New in version 4.0.*\n\n   .. _subresource integrity: https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\n\n",
        "description_content_type": "text/x-rst",
        "author": "Adam Turner",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Extension",
          "Topic :: Documentation",
          "Topic :: Documentation :: Sphinx"
        ],
        "requires_dist": [
          "Sphinx>=1.8"
        ],
        "requires_python": ">=2.7",
        "project_url": [
          "Repository, https://github.com/sphinx-contrib/jquery/"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/95/d6/2e0bda62b2a808070ac922d21a950aa2cb5e4fcfb87e5ff5f86bc43a2201/sphinxcontrib_serializinghtml-1.1.9-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=9b36e503703ff04f20e9675771df105e58aa029cfcbc23b8ed716019b7416ae1",
          "hashes": {
            "sha256": "9b36e503703ff04f20e9675771df105e58aa029cfcbc23b8ed716019b7416ae1"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sphinxcontrib-serializinghtml",
        "version": "1.1.9",
        "summary": "sphinxcontrib-serializinghtml is a sphinx extension which outputs \"serialized\" HTML files (json and pickle)",
        "description": "=============================\nsphinxcontrib-serializinghtml\n=============================\n\nsphinxcontrib-serializinghtml is a sphinx extension which outputs\n\"serialized\" HTML files (json and pickle).\n\nFor more details, please visit http://www.sphinx-doc.org/.\n\nInstalling\n==========\n\nInstall from PyPI::\n\n   pip install -U sphinxcontrib-serializinghtml\n\nContributing\n============\n\nSee `CONTRIBUTING.rst`__\n\n.. __: https://github.com/sphinx-doc/sphinx/blob/master/CONTRIBUTING.rst\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Georg Brandl <georg@python.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Intended Audience :: Education",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Extension",
          "Topic :: Documentation",
          "Topic :: Documentation :: Sphinx",
          "Topic :: Text Processing",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "Sphinx>=5",
          "flake8 ; extra == \"lint\"",
          "mypy ; extra == \"lint\"",
          "docutils-stubs ; extra == \"lint\"",
          "pytest ; extra == \"test\""
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Changelog, https://www.sphinx-doc.org/en/master/changes.html",
          "Code, https://github.com/sphinx-doc/sphinxcontrib-serializinghtml",
          "Download, https://pypi.org/project/sphinxcontrib-serializinghtml/",
          "Homepage, https://www.sphinx-doc.org/",
          "Issue tracker, https://github.com/sphinx-doc/sphinx/issues"
        ],
        "provides_extra": [
          "lint",
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ec/6b/63cc3df74987c36fe26157ee12e09e8f9db4de771e0f3404263117e75b95/typing_extensions-4.7.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=440d5dd3af93b060174bf433bccd69b0babc3b15b1a8dca43789fd7f61514b36",
          "hashes": {
            "sha256": "440d5dd3af93b060174bf433bccd69b0babc3b15b1a8dca43789fd7f61514b36"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "typing_extensions",
        "version": "4.7.1",
        "summary": "Backported and Experimental Type Hints for Python 3.7+",
        "description": "# Typing Extensions\n\n[![Chat at https://gitter.im/python/typing](https://badges.gitter.im/python/typing.svg)](https://gitter.im/python/typing)\n\n[Documentation](https://typing-extensions.readthedocs.io/en/latest/#) –\n[PyPI](https://pypi.org/project/typing-extensions/)\n\n## Overview\n\nThe `typing_extensions` module serves two related purposes:\n\n- Enable use of new type system features on older Python versions. For example,\n  `typing.TypeGuard` is new in Python 3.10, but `typing_extensions` allows\n  users on previous Python versions to use it too.\n- Enable experimentation with new type system PEPs before they are accepted and\n  added to the `typing` module.\n\n`typing_extensions` is treated specially by static type checkers such as\nmypy and pyright. Objects defined in `typing_extensions` are treated the same\nway as equivalent forms in `typing`.\n\n`typing_extensions` uses\n[Semantic Versioning](https://semver.org/). The\nmajor version will be incremented only for backwards-incompatible changes.\nTherefore, it's safe to depend\non `typing_extensions` like this: `typing_extensions >=x.y, <(x+1)`,\nwhere `x.y` is the first version that includes all features you need.\n\n`typing_extensions` supports Python versions 3.7 and higher.\n\n## Included items\n\nSee [the documentation](https://typing-extensions.readthedocs.io/en/latest/#) for a\ncomplete listing of module contents.\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/python/typing_extensions/blob/main/CONTRIBUTING.md)\nfor how to contribute to `typing_extensions`.\n\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "annotations",
          "backport",
          "checker",
          "checking",
          "function",
          "hinting",
          "hints",
          "type",
          "typechecking",
          "typehinting",
          "typehints",
          "typing"
        ],
        "author_email": "\"Guido van Rossum, Jukka Lehtosalo, Łukasz Langa, Michael Lee\" <levkivskyi@gmail.com>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Python Software Foundation License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Topic :: Software Development"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Bug Tracker, https://github.com/python/typing_extensions/issues",
          "Changes, https://github.com/python/typing_extensions/blob/main/CHANGELOG.md",
          "Documentation, https://typing-extensions.readthedocs.io/",
          "Home, https://github.com/python/typing_extensions",
          "Q & A, https://github.com/python/typing/discussions",
          "Repository, https://github.com/python/typing_extensions"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c0/0c/261c0949083c0ac635853528bb0070c89e927841d4e533ba0b5563365c06/sphinxcontrib_applehelp-1.0.7-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=094c4d56209d1734e7d252f6e0b3ccc090bd52ee56807a5d9315b19c122ab15d",
          "hashes": {
            "sha256": "094c4d56209d1734e7d252f6e0b3ccc090bd52ee56807a5d9315b19c122ab15d"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sphinxcontrib-applehelp",
        "version": "1.0.7",
        "summary": "sphinxcontrib-applehelp is a Sphinx extension which outputs Apple help books",
        "description": "=======================\nsphinxcontrib-applehelp\n=======================\n\nsphinxcontrib-applehelp is a sphinx extension which outputs Apple help books.\n\nFor more details, please visit http://www.sphinx-doc.org/.\n\nInstalling\n==========\n\nInstall from PyPI::\n\n   pip install -U sphinxcontrib-applehelp\n\nContributing\n============\n\nSee `CONTRIBUTING.rst`__\n\n.. __: https://github.com/sphinx-doc/sphinx/blob/master/CONTRIBUTING.rst\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Georg Brandl <georg@python.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Intended Audience :: Education",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Extension",
          "Topic :: Documentation",
          "Topic :: Documentation :: Sphinx",
          "Topic :: Text Processing",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "Sphinx>=5",
          "flake8 ; extra == \"lint\"",
          "mypy ; extra == \"lint\"",
          "docutils-stubs ; extra == \"lint\"",
          "pytest ; extra == \"test\""
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Changelog, https://www.sphinx-doc.org/en/master/changes.html",
          "Code, https://github.com/sphinx-doc/sphinxcontrib-applehelp",
          "Download, https://pypi.org/project/sphinxcontrib-applehelp/",
          "Homepage, https://www.sphinx-doc.org/",
          "Issue tracker, https://github.com/sphinx-doc/sphinx/issues"
        ],
        "provides_extra": [
          "lint",
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c0/03/010ac733ec7b7f71c1dc88e7115743ee466560d6d85373b56fb9916e4586/sphinxcontrib_devhelp-1.0.5-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=fe8009aed765188f08fcaadbb3ea0d90ce8ae2d76710b7e29ea7d047177dae2f",
          "hashes": {
            "sha256": "fe8009aed765188f08fcaadbb3ea0d90ce8ae2d76710b7e29ea7d047177dae2f"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sphinxcontrib-devhelp",
        "version": "1.0.5",
        "summary": "sphinxcontrib-devhelp is a sphinx extension which outputs Devhelp documents",
        "description": "=====================\nsphinxcontrib-devhelp\n=====================\n\nsphinxcontrib-devhelp is a sphinx extension which outputs Devhelp_ document.\n\nFor more details, please visit http://www.sphinx-doc.org/.\n\n.. _Devhelp: https://wiki.gnome.org/Apps/Devhelp\n\nInstalling\n==========\n\nInstall from PyPI::\n\n   pip install -U sphinxcontrib-devhelp\n\nContributing\n============\n\nSee `CONTRIBUTING.rst`__\n\n.. __: https://github.com/sphinx-doc/sphinx/blob/master/CONTRIBUTING.rst\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Georg Brandl <georg@python.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Intended Audience :: Education",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Extension",
          "Topic :: Documentation",
          "Topic :: Documentation :: Sphinx",
          "Topic :: Text Processing",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "Sphinx>=5",
          "flake8 ; extra == \"lint\"",
          "mypy ; extra == \"lint\"",
          "docutils-stubs ; extra == \"lint\"",
          "pytest ; extra == \"test\""
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Changelog, https://www.sphinx-doc.org/en/master/changes.html",
          "Code, https://github.com/sphinx-doc/sphinxcontrib-devhelp",
          "Download, https://pypi.org/project/sphinxcontrib-devhelp/",
          "Homepage, https://www.sphinx-doc.org/",
          "Issue tracker, https://github.com/sphinx-doc/sphinx/issues"
        ],
        "provides_extra": [
          "lint",
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c2/42/4c8646762ee83602e3fb3fbe774c2fac12f317deb0b5dbeeedd2d3ba4b77/sphinxcontrib_jsmath-1.0.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2ec2eaebfb78f3f2078e73666b1415417a116cc848b72e5172e596c871103178",
          "hashes": {
            "sha256": "2ec2eaebfb78f3f2078e73666b1415417a116cc848b72e5172e596c871103178"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sphinxcontrib-jsmath",
        "version": "1.0.1",
        "platform": [
          "any"
        ],
        "summary": "A sphinx extension which renders display math in HTML via JavaScript",
        "description": "\nsphinxcontrib-jsmath is a sphinx extension which renders display math in HTML\nvia JavaScript.\n\n\n",
        "home_page": "http://sphinx-doc.org/",
        "download_url": "https://pypi.org/project/sphinxcontrib-jsmath/",
        "author": "Georg Brandl",
        "author_email": "georg@python.org",
        "license": "BSD",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Intended Audience :: Education",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Extension",
          "Topic :: Documentation",
          "Topic :: Documentation :: Sphinx",
          "Topic :: Text Processing",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "pytest ; extra == 'test'",
          "flake8 ; extra == 'test'",
          "mypy ; extra == 'test'"
        ],
        "requires_python": ">=3.5",
        "provides_extra": [
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/1f/e5/1850f3f118e95581c1e30b57028ac979badee1eb29e70ee72b0241f5a185/sphinxcontrib_qthelp-1.0.6-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=bf76886ee7470b934e363da7a954ea2825650013d367728588732c7350f49ea4",
          "hashes": {
            "sha256": "bf76886ee7470b934e363da7a954ea2825650013d367728588732c7350f49ea4"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "sphinxcontrib-qthelp",
        "version": "1.0.6",
        "summary": "sphinxcontrib-qthelp is a sphinx extension which outputs QtHelp documents",
        "description": "====================\nsphinxcontrib-qthelp\n====================\n\nsphinxcontrib-qthelp is a sphinx extension which outputs QtHelp document.\n\nFor more details, please visit http://www.sphinx-doc.org/.\n\nInstalling\n==========\n\nInstall from PyPI::\n\n   pip install -U sphinxcontrib-qthelp\n\nContributing\n============\n\nSee `CONTRIBUTING.rst`__\n\n.. __: https://github.com/sphinx-doc/sphinx/blob/master/CONTRIBUTING.rst\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Georg Brandl <georg@python.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "Intended Audience :: Education",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Framework :: Sphinx",
          "Framework :: Sphinx :: Extension",
          "Topic :: Documentation",
          "Topic :: Documentation :: Sphinx",
          "Topic :: Text Processing",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "Sphinx>=5",
          "flake8 ; extra == \"lint\"",
          "mypy ; extra == \"lint\"",
          "docutils-stubs ; extra == \"lint\"",
          "pytest ; extra == \"test\""
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Changelog, https://www.sphinx-doc.org/en/master/changes.html",
          "Code, https://github.com/sphinx-doc/sphinxcontrib-qthelp",
          "Download, https://pypi.org/project/sphinxcontrib-qthelp/",
          "Homepage, https://www.sphinx-doc.org/",
          "Issue tracker, https://github.com/sphinx-doc/sphinx/issues"
        ],
        "provides_extra": [
          "lint",
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/4c/dd/2234eab22353ffc7d94e8d13177aaa050113286e93e7b40eae01fbf7c3d9/certifi-2023.7.22-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=92d6037539857d8206b8f6ae472e8b77db8058fec5937a1ef3f54304089edbb9",
          "hashes": {
            "sha256": "92d6037539857d8206b8f6ae472e8b77db8058fec5937a1ef3f54304089edbb9"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "certifi",
        "version": "2023.7.22",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Python package for providing Mozilla's CA Bundle.",
        "description": "Certifi: Python SSL Certificates\n================================\n\nCertifi provides Mozilla's carefully curated collection of Root Certificates for\nvalidating the trustworthiness of SSL certificates while verifying the identity\nof TLS hosts. It has been extracted from the `Requests`_ project.\n\nInstallation\n------------\n\n``certifi`` is available on PyPI. Simply install it with ``pip``::\n\n    $ pip install certifi\n\nUsage\n-----\n\nTo reference the installed certificate authority (CA) bundle, you can use the\nbuilt-in function::\n\n    >>> import certifi\n\n    >>> certifi.where()\n    '/usr/local/lib/python3.7/site-packages/certifi/cacert.pem'\n\nOr from the command line::\n\n    $ python -m certifi\n    /usr/local/lib/python3.7/site-packages/certifi/cacert.pem\n\nEnjoy!\n\n.. _`Requests`: https://requests.readthedocs.io/en/master/\n\nAddition/Removal of Certificates\n--------------------------------\n\nCertifi does not support any addition/removal or other modification of the\nCA trust store content. This project is intended to provide a reliable and\nhighly portable root of trust to python deployments. Look to upstream projects\nfor methods to use alternate trust.\n\n\n",
        "home_page": "https://github.com/certifi/python-certifi",
        "author": "Kenneth Reitz",
        "author_email": "me@kennethreitz.com",
        "license": "MPL-2.0",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
          "Natural Language :: English",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11"
        ],
        "requires_python": ">=3.6",
        "project_url": [
          "Source, https://github.com/certifi/python-certifi"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/bc/85/ef25d4ba14c7653c3020a1c6e1a7413e6791ef36a0ac177efa605fc2c737/charset_normalizer-3.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=246de67b99b6851627d945db38147d1b209a899311b1305dd84916f2b88526c6",
          "hashes": {
            "sha256": "246de67b99b6851627d945db38147d1b209a899311b1305dd84916f2b88526c6"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "charset-normalizer",
        "version": "3.2.0",
        "summary": "The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.",
        "description": "<h1 align=\"center\">Charset Detection, for Everyone 👋</h1>\n\n<p align=\"center\">\n  <sup>The Real First Universal Charset Detector</sup><br>\n  <a href=\"https://pypi.org/project/charset-normalizer\">\n    <img src=\"https://img.shields.io/pypi/pyversions/charset_normalizer.svg?orange=blue\" />\n  </a>\n  <a href=\"https://pepy.tech/project/charset-normalizer/\">\n    <img alt=\"Download Count Total\" src=\"https://pepy.tech/badge/charset-normalizer/month\" />\n  </a>\n  <a href=\"https://bestpractices.coreinfrastructure.org/projects/7297\">\n    <img src=\"https://bestpractices.coreinfrastructure.org/projects/7297/badge\">\n  </a>\n</p>\n\n> A library that helps you read text from an unknown charset encoding.<br /> Motivated by `chardet`,\n> I'm trying to resolve the issue by taking a new approach.\n> All IANA character set names for which the Python core library provides codecs are supported.\n\n<p align=\"center\">\n  >>>>> <a href=\"https://charsetnormalizerweb.ousret.now.sh\" target=\"_blank\">👉 Try Me Online Now, Then Adopt Me 👈 </a> <<<<<\n</p>\n\nThis project offers you an alternative to **Universal Charset Encoding Detector**, also known as **Chardet**.\n\n| Feature                                          | [Chardet](https://github.com/chardet/chardet) |                                           Charset Normalizer                                           | [cChardet](https://github.com/PyYoshi/cChardet) |\n|--------------------------------------------------|:---------------------------------------------:|:------------------------------------------------------------------------------------------------------:|:-----------------------------------------------:|\n| `Fast`                                           |                     ❌<br>                     |                                                 ✅<br>                                                  |                     ✅ <br>                      |\n| `Universal**`                                    |                       ❌                       |                                                   ✅                                                    |                        ❌                        |\n| `Reliable` **without** distinguishable standards |                       ❌                       |                                                   ✅                                                    |                        ✅                        |\n| `Reliable` **with** distinguishable standards    |                       ✅                       |                                                   ✅                                                    |                        ✅                        |\n| `License`                                        |           LGPL-2.1<br>_restrictive_           |                                                  MIT                                                   |            MPL-1.1<br>_restrictive_             |\n| `Native Python`                                  |                       ✅                       |                                                   ✅                                                    |                        ❌                        |\n| `Detect spoken language`                         |                       ❌                       |                                                   ✅                                                    |                       N/A                       |\n| `UnicodeDecodeError Safety`                      |                       ❌                       |                                                   ✅                                                    |                        ❌                        |\n| `Whl Size`                                       |                   193.6 kB                    |                                                 40 kB                                                  |                     ~200 kB                     |\n| `Supported Encoding`                             |                      33                       | 🎉 [90](https://charset-normalizer.readthedocs.io/en/latest/user/support.html#supported-encodings) |                       40                        |\n\n<p align=\"center\">\n<img src=\"https://i.imgflip.com/373iay.gif\" alt=\"Reading Normalized Text\" width=\"226\"/><img src=\"https://media.tenor.com/images/c0180f70732a18b4965448d33adba3d0/tenor.gif\" alt=\"Cat Reading Text\" width=\"200\"/>\n\n*\\*\\* : They are clearly using specific code for a specific encoding even if covering most of used one*<br> \nDid you got there because of the logs? See [https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html](https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html)\n\n## ⚡ Performance\n\nThis package offer better performance than its counterpart Chardet. Here are some numbers.\n\n| Package                                       | Accuracy | Mean per file (ms) | File per sec (est) |\n|-----------------------------------------------|:--------:|:------------------:|:------------------:|\n| [chardet](https://github.com/chardet/chardet) |   86 %   |       200 ms       |     5 file/sec     |\n| charset-normalizer                            | **98 %** |     **10 ms**      |    100 file/sec    |\n\n| Package                                       | 99th percentile | 95th percentile | 50th percentile |\n|-----------------------------------------------|:---------------:|:---------------:|:---------------:|\n| [chardet](https://github.com/chardet/chardet) |     1200 ms     |     287 ms      |      23 ms      |\n| charset-normalizer                            |     100 ms      |      50 ms      |      5 ms       |\n\nChardet's performance on larger file (1MB+) are very poor. Expect huge difference on large payload.\n\n> Stats are generated using 400+ files using default parameters. More details on used files, see GHA workflows.\n> And yes, these results might change at any time. The dataset can be updated to include more files.\n> The actual delays heavily depends on your CPU capabilities. The factors should remain the same.\n> Keep in mind that the stats are generous and that Chardet accuracy vs our is measured using Chardet initial capability\n> (eg. Supported Encoding) Challenge-them if you want.\n\n## ✨ Installation\n\nUsing pip:\n\n```sh\npip install charset-normalizer -U\n```\n\n## 🚀 Basic Usage\n\n### CLI\nThis package comes with a CLI.\n\n```\nusage: normalizer [-h] [-v] [-a] [-n] [-m] [-r] [-f] [-t THRESHOLD]\n                  file [file ...]\n\nThe Real First Universal Charset Detector. Discover originating encoding used\non text file. Normalize text to unicode.\n\npositional arguments:\n  files                 File(s) to be analysed\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         Display complementary information about file if any.\n                        Stdout will contain logs about the detection process.\n  -a, --with-alternative\n                        Output complementary possibilities if any. Top-level\n                        JSON WILL be a list.\n  -n, --normalize       Permit to normalize input file. If not set, program\n                        does not write anything.\n  -m, --minimal         Only output the charset detected to STDOUT. Disabling\n                        JSON output.\n  -r, --replace         Replace file when trying to normalize it instead of\n                        creating a new one.\n  -f, --force           Replace file without asking if you are sure, use this\n                        flag with caution.\n  -t THRESHOLD, --threshold THRESHOLD\n                        Define a custom maximum amount of chaos allowed in\n                        decoded content. 0. <= chaos <= 1.\n  --version             Show version information and exit.\n```\n\n```bash\nnormalizer ./data/sample.1.fr.srt\n```\n\n🎉 Since version 1.4.0 the CLI produce easily usable stdout result in JSON format.\n\n```json\n{\n    \"path\": \"/home/default/projects/charset_normalizer/data/sample.1.fr.srt\",\n    \"encoding\": \"cp1252\",\n    \"encoding_aliases\": [\n        \"1252\",\n        \"windows_1252\"\n    ],\n    \"alternative_encodings\": [\n        \"cp1254\",\n        \"cp1256\",\n        \"cp1258\",\n        \"iso8859_14\",\n        \"iso8859_15\",\n        \"iso8859_16\",\n        \"iso8859_3\",\n        \"iso8859_9\",\n        \"latin_1\",\n        \"mbcs\"\n    ],\n    \"language\": \"French\",\n    \"alphabets\": [\n        \"Basic Latin\",\n        \"Latin-1 Supplement\"\n    ],\n    \"has_sig_or_bom\": false,\n    \"chaos\": 0.149,\n    \"coherence\": 97.152,\n    \"unicode_path\": null,\n    \"is_preferred\": true\n}\n```\n\n### Python\n*Just print out normalized text*\n```python\nfrom charset_normalizer import from_path\n\nresults = from_path('./my_subtitle.srt')\n\nprint(str(results.best()))\n```\n\n*Upgrade your code without effort*\n```python\nfrom charset_normalizer import detect\n```\n\nThe above code will behave the same as **chardet**. We ensure that we offer the best (reasonable) BC result possible.\n\nSee the docs for advanced usage : [readthedocs.io](https://charset-normalizer.readthedocs.io/en/latest/)\n\n## 😇 Why\n\nWhen I started using Chardet, I noticed that it was not suited to my expectations, and I wanted to propose a\nreliable alternative using a completely different method. Also! I never back down on a good challenge!\n\nI **don't care** about the **originating charset** encoding, because **two different tables** can\nproduce **two identical rendered string.**\nWhat I want is to get readable text, the best I can. \n\nIn a way, **I'm brute forcing text decoding.** How cool is that ? 😎\n\nDon't confuse package **ftfy** with charset-normalizer or chardet. ftfy goal is to repair unicode string whereas charset-normalizer to convert raw file in unknown encoding to unicode.\n\n## 🍰 How\n\n  - Discard all charset encoding table that could not fit the binary content.\n  - Measure noise, or the mess once opened (by chunks) with a corresponding charset encoding.\n  - Extract matches with the lowest mess detected.\n  - Additionally, we measure coherence / probe for a language.\n\n**Wait a minute**, what is noise/mess and coherence according to **YOU ?**\n\n*Noise :* I opened hundred of text files, **written by humans**, with the wrong encoding table. **I observed**, then\n**I established** some ground rules about **what is obvious** when **it seems like** a mess.\n I know that my interpretation of what is noise is probably incomplete, feel free to contribute in order to\n improve or rewrite it.\n\n*Coherence :* For each language there is on earth, we have computed ranked letter appearance occurrences (the best we can). So I thought\nthat intel is worth something here. So I use those records against decoded text to check if I can detect intelligent design.\n\n## ⚡ Known limitations\n\n  - Language detection is unreliable when text contains two or more languages sharing identical letters. (eg. HTML (english tags) + Turkish content (Sharing Latin characters))\n  - Every charset detector heavily depends on sufficient content. In common cases, do not bother run detection on very tiny content.\n\n## ⚠️ About Python EOLs\n\n**If you are running:**\n\n- Python >=2.7,<3.5: Unsupported\n- Python 3.5: charset-normalizer < 2.1\n- Python 3.6: charset-normalizer < 3.1\n\nUpgrade your Python interpreter as soon as possible.\n\n## 👤 Contributing\n\nContributions, issues and feature requests are very much welcome.<br />\nFeel free to check [issues page](https://github.com/ousret/charset_normalizer/issues) if you want to contribute.\n\n## 📝 License\n\nCopyright © [Ahmed TAHRI @Ousret](https://github.com/Ousret).<br />\nThis project is [MIT](https://github.com/Ousret/charset_normalizer/blob/master/LICENSE) licensed.\n\nCharacters frequencies used in this project © 2012 [Denny Vrandečić](http://simia.net/letters/)\n\n## 💼 For Enterprise\n\nProfessional support for charset-normalizer is available as part of the [Tidelift\nSubscription][1]. Tidelift gives software development teams a single source for\npurchasing and maintaining their software, with professional grade assurances\nfrom the experts who know it best, while seamlessly integrating with existing\ntools.\n\n[1]: https://tidelift.com/subscription/pkg/pypi-charset-normalizer?utm_source=pypi-charset-normalizer&utm_medium=readme\n\n# Changelog\nAll notable changes to charset-normalizer will be documented in this file. This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## [3.2.0](https://github.com/Ousret/charset_normalizer/compare/3.1.0...3.2.0) (2023-06-07)\n\n### Changed\n- Typehint for function `from_path` no longer enforce `PathLike` as its first argument\n- Minor improvement over the global detection reliability\n\n### Added\n- Introduce function `is_binary` that relies on main capabilities, and optimized to detect binaries\n- Propagate `enable_fallback` argument throughout `from_bytes`, `from_path`, and `from_fp` that allow a deeper control over the detection (default True)\n- Explicit support for Python 3.12\n\n### Fixed\n- Edge case detection failure where a file would contain 'very-long' camel cased word (Issue #289)\n\n## [3.1.0](https://github.com/Ousret/charset_normalizer/compare/3.0.1...3.1.0) (2023-03-06)\n\n### Added\n- Argument `should_rename_legacy` for legacy function `detect` and disregard any new arguments without errors (PR #262)\n\n### Removed\n- Support for Python 3.6 (PR #260)\n\n### Changed\n- Optional speedup provided by mypy/c 1.0.1\n\n## [3.0.1](https://github.com/Ousret/charset_normalizer/compare/3.0.0...3.0.1) (2022-11-18)\n\n### Fixed\n- Multi-bytes cutter/chunk generator did not always cut correctly (PR #233)\n\n### Changed\n- Speedup provided by mypy/c 0.990 on Python >= 3.7\n\n## [3.0.0](https://github.com/Ousret/charset_normalizer/compare/2.1.1...3.0.0) (2022-10-20)\n\n### Added\n- Extend the capability of explain=True when cp_isolation contains at most two entries (min one), will log in details of the Mess-detector results\n- Support for alternative language frequency set in charset_normalizer.assets.FREQUENCIES\n- Add parameter `language_threshold` in `from_bytes`, `from_path` and `from_fp` to adjust the minimum expected coherence ratio\n- `normalizer --version` now specify if current version provide extra speedup (meaning mypyc compilation whl)\n\n### Changed\n- Build with static metadata using 'build' frontend\n- Make the language detection stricter\n- Optional: Module `md.py` can be compiled using Mypyc to provide an extra speedup up to 4x faster than v2.1\n\n### Fixed\n- CLI with opt --normalize fail when using full path for files\n- TooManyAccentuatedPlugin induce false positive on the mess detection when too few alpha character have been fed to it\n- Sphinx warnings when generating the documentation\n\n### Removed\n- Coherence detector no longer return 'Simple English' instead return 'English'\n- Coherence detector no longer return 'Classical Chinese' instead return 'Chinese'\n- Breaking: Method `first()` and `best()` from CharsetMatch\n- UTF-7 will no longer appear as \"detected\" without a recognized SIG/mark (is unreliable/conflict with ASCII)\n- Breaking: Class aliases CharsetDetector, CharsetDoctor, CharsetNormalizerMatch and CharsetNormalizerMatches\n- Breaking: Top-level function `normalize`\n- Breaking: Properties `chaos_secondary_pass`, `coherence_non_latin` and `w_counter` from CharsetMatch\n- Support for the backport `unicodedata2`\n\n## [3.0.0rc1](https://github.com/Ousret/charset_normalizer/compare/3.0.0b2...3.0.0rc1) (2022-10-18)\n\n### Added\n- Extend the capability of explain=True when cp_isolation contains at most two entries (min one), will log in details of the Mess-detector results\n- Support for alternative language frequency set in charset_normalizer.assets.FREQUENCIES\n- Add parameter `language_threshold` in `from_bytes`, `from_path` and `from_fp` to adjust the minimum expected coherence ratio\n\n### Changed\n- Build with static metadata using 'build' frontend\n- Make the language detection stricter\n\n### Fixed\n- CLI with opt --normalize fail when using full path for files\n- TooManyAccentuatedPlugin induce false positive on the mess detection when too few alpha character have been fed to it\n\n### Removed\n- Coherence detector no longer return 'Simple English' instead return 'English'\n- Coherence detector no longer return 'Classical Chinese' instead return 'Chinese'\n\n## [3.0.0b2](https://github.com/Ousret/charset_normalizer/compare/3.0.0b1...3.0.0b2) (2022-08-21)\n\n### Added\n- `normalizer --version` now specify if current version provide extra speedup (meaning mypyc compilation whl)\n\n### Removed\n- Breaking: Method `first()` and `best()` from CharsetMatch\n- UTF-7 will no longer appear as \"detected\" without a recognized SIG/mark (is unreliable/conflict with ASCII)\n\n### Fixed\n- Sphinx warnings when generating the documentation\n\n## [3.0.0b1](https://github.com/Ousret/charset_normalizer/compare/2.1.0...3.0.0b1) (2022-08-15)\n\n### Changed\n- Optional: Module `md.py` can be compiled using Mypyc to provide an extra speedup up to 4x faster than v2.1\n\n### Removed\n- Breaking: Class aliases CharsetDetector, CharsetDoctor, CharsetNormalizerMatch and CharsetNormalizerMatches\n- Breaking: Top-level function `normalize`\n- Breaking: Properties `chaos_secondary_pass`, `coherence_non_latin` and `w_counter` from CharsetMatch\n- Support for the backport `unicodedata2`\n\n## [2.1.1](https://github.com/Ousret/charset_normalizer/compare/2.1.0...2.1.1) (2022-08-19)\n\n### Deprecated\n- Function `normalize` scheduled for removal in 3.0\n\n### Changed\n- Removed useless call to decode in fn is_unprintable (#206)\n\n### Fixed\n- Third-party library (i18n xgettext) crashing not recognizing utf_8 (PEP 263) with underscore from [@aleksandernovikov](https://github.com/aleksandernovikov) (#204)\n\n## [2.1.0](https://github.com/Ousret/charset_normalizer/compare/2.0.12...2.1.0) (2022-06-19)\n\n### Added\n- Output the Unicode table version when running the CLI with `--version` (PR #194)\n\n### Changed\n- Re-use decoded buffer for single byte character sets from [@nijel](https://github.com/nijel) (PR #175)\n- Fixing some performance bottlenecks from [@deedy5](https://github.com/deedy5) (PR #183)\n\n### Fixed\n- Workaround potential bug in cpython with Zero Width No-Break Space located in Arabic Presentation Forms-B, Unicode 1.1 not acknowledged as space (PR #175)\n- CLI default threshold aligned with the API threshold from [@oleksandr-kuzmenko](https://github.com/oleksandr-kuzmenko) (PR #181)\n\n### Removed\n- Support for Python 3.5 (PR #192)\n\n### Deprecated\n- Use of backport unicodedata from `unicodedata2` as Python is quickly catching up, scheduled for removal in 3.0 (PR #194)\n\n## [2.0.12](https://github.com/Ousret/charset_normalizer/compare/2.0.11...2.0.12) (2022-02-12)\n\n### Fixed\n- ASCII miss-detection on rare cases (PR #170) \n\n## [2.0.11](https://github.com/Ousret/charset_normalizer/compare/2.0.10...2.0.11) (2022-01-30)\n\n### Added\n- Explicit support for Python 3.11 (PR #164)\n\n### Changed\n- The logging behavior have been completely reviewed, now using only TRACE and DEBUG levels (PR #163 #165)\n\n## [2.0.10](https://github.com/Ousret/charset_normalizer/compare/2.0.9...2.0.10) (2022-01-04)\n\n### Fixed\n- Fallback match entries might lead to UnicodeDecodeError for large bytes sequence (PR #154)\n\n### Changed\n- Skipping the language-detection (CD) on ASCII (PR #155)\n\n## [2.0.9](https://github.com/Ousret/charset_normalizer/compare/2.0.8...2.0.9) (2021-12-03)\n\n### Changed\n- Moderating the logging impact (since 2.0.8) for specific environments (PR #147)\n\n### Fixed\n- Wrong logging level applied when setting kwarg `explain` to True (PR #146)\n\n## [2.0.8](https://github.com/Ousret/charset_normalizer/compare/2.0.7...2.0.8) (2021-11-24)\n### Changed\n- Improvement over Vietnamese detection (PR #126)\n- MD improvement on trailing data and long foreign (non-pure latin) data (PR #124)\n- Efficiency improvements in cd/alphabet_languages from [@adbar](https://github.com/adbar) (PR #122)\n- call sum() without an intermediary list following PEP 289 recommendations from [@adbar](https://github.com/adbar) (PR #129)\n- Code style as refactored by Sourcery-AI (PR #131) \n- Minor adjustment on the MD around european words (PR #133)\n- Remove and replace SRTs from assets / tests (PR #139)\n- Initialize the library logger with a `NullHandler` by default from [@nmaynes](https://github.com/nmaynes) (PR #135)\n- Setting kwarg `explain` to True will add provisionally (bounded to function lifespan) a specific stream handler (PR #135)\n\n### Fixed\n- Fix large (misleading) sequence giving UnicodeDecodeError (PR #137)\n- Avoid using too insignificant chunk (PR #137)\n\n### Added\n- Add and expose function `set_logging_handler` to configure a specific StreamHandler from [@nmaynes](https://github.com/nmaynes) (PR #135)\n- Add `CHANGELOG.md` entries, format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) (PR #141)\n\n## [2.0.7](https://github.com/Ousret/charset_normalizer/compare/2.0.6...2.0.7) (2021-10-11)\n### Added\n- Add support for Kazakh (Cyrillic) language detection (PR #109)\n\n### Changed\n- Further, improve inferring the language from a given single-byte code page (PR #112)\n- Vainly trying to leverage PEP263 when PEP3120 is not supported (PR #116)\n- Refactoring for potential performance improvements in loops from [@adbar](https://github.com/adbar) (PR #113)\n- Various detection improvement (MD+CD) (PR #117)\n\n### Removed\n- Remove redundant logging entry about detected language(s) (PR #115)\n\n### Fixed\n- Fix a minor inconsistency between Python 3.5 and other versions regarding language detection (PR #117 #102)\n\n## [2.0.6](https://github.com/Ousret/charset_normalizer/compare/2.0.5...2.0.6) (2021-09-18)\n### Fixed\n- Unforeseen regression with the loss of the backward-compatibility with some older minor of Python 3.5.x (PR #100)\n- Fix CLI crash when using --minimal output in certain cases (PR #103)\n\n### Changed\n- Minor improvement to the detection efficiency (less than 1%) (PR #106 #101)\n\n## [2.0.5](https://github.com/Ousret/charset_normalizer/compare/2.0.4...2.0.5) (2021-09-14)\n### Changed\n- The project now comply with: flake8, mypy, isort and black to ensure a better overall quality (PR #81)\n- The BC-support with v1.x was improved, the old staticmethods are restored (PR #82)\n- The Unicode detection is slightly improved (PR #93)\n- Add syntax sugar \\_\\_bool\\_\\_ for results CharsetMatches list-container (PR #91)\n\n### Removed\n- The project no longer raise warning on tiny content given for detection, will be simply logged as warning instead (PR #92)\n\n### Fixed\n- In some rare case, the chunks extractor could cut in the middle of a multi-byte character and could mislead the mess detection (PR #95)\n- Some rare 'space' characters could trip up the UnprintablePlugin/Mess detection (PR #96)\n- The MANIFEST.in was not exhaustive (PR #78)\n\n## [2.0.4](https://github.com/Ousret/charset_normalizer/compare/2.0.3...2.0.4) (2021-07-30)\n### Fixed\n- The CLI no longer raise an unexpected exception when no encoding has been found (PR #70)\n- Fix accessing the 'alphabets' property when the payload contains surrogate characters (PR #68)\n- The logger could mislead (explain=True) on detected languages and the impact of one MBCS match (PR #72)\n- Submatch factoring could be wrong in rare edge cases (PR #72)\n- Multiple files given to the CLI were ignored when publishing results to STDOUT. (After the first path) (PR #72)\n- Fix line endings from CRLF to LF for certain project files (PR #67)\n\n### Changed\n- Adjust the MD to lower the sensitivity, thus improving the global detection reliability (PR #69 #76)\n- Allow fallback on specified encoding if any (PR #71)\n\n## [2.0.3](https://github.com/Ousret/charset_normalizer/compare/2.0.2...2.0.3) (2021-07-16)\n### Changed\n- Part of the detection mechanism has been improved to be less sensitive, resulting in more accurate detection results. Especially ASCII. (PR #63)\n- According to the community wishes, the detection will fall back on ASCII or UTF-8 in a last-resort case. (PR #64)\n\n## [2.0.2](https://github.com/Ousret/charset_normalizer/compare/2.0.1...2.0.2) (2021-07-15)\n### Fixed\n- Empty/Too small JSON payload miss-detection fixed. Report from [@tseaver](https://github.com/tseaver) (PR #59) \n\n### Changed\n- Don't inject unicodedata2 into sys.modules from [@akx](https://github.com/akx) (PR #57)\n\n## [2.0.1](https://github.com/Ousret/charset_normalizer/compare/2.0.0...2.0.1) (2021-07-13)\n### Fixed\n- Make it work where there isn't a filesystem available, dropping assets frequencies.json. Report from [@sethmlarson](https://github.com/sethmlarson). (PR #55)\n- Using explain=False permanently disable the verbose output in the current runtime (PR #47)\n- One log entry (language target preemptive) was not show in logs when using explain=True (PR #47)\n- Fix undesired exception (ValueError) on getitem of instance CharsetMatches (PR #52)\n\n### Changed\n- Public function normalize default args values were not aligned with from_bytes (PR #53)\n\n### Added\n- You may now use charset aliases in cp_isolation and cp_exclusion arguments (PR #47)\n\n## [2.0.0](https://github.com/Ousret/charset_normalizer/compare/1.4.1...2.0.0) (2021-07-02)\n### Changed\n- 4x to 5 times faster than the previous 1.4.0 release. At least 2x faster than Chardet.\n- Accent has been made on UTF-8 detection, should perform rather instantaneous.\n- The backward compatibility with Chardet has been greatly improved. The legacy detect function returns an identical charset name whenever possible.\n- The detection mechanism has been slightly improved, now Turkish content is detected correctly (most of the time)\n- The program has been rewritten to ease the readability and maintainability. (+Using static typing)+\n- utf_7 detection has been reinstated.\n\n### Removed\n- This package no longer require anything when used with Python 3.5 (Dropped cached_property)\n- Removed support for these languages: Catalan, Esperanto, Kazakh, Baque, Volapük, Azeri, Galician, Nynorsk, Macedonian, and Serbocroatian.\n- The exception hook on UnicodeDecodeError has been removed.\n\n### Deprecated\n- Methods coherence_non_latin, w_counter, chaos_secondary_pass of the class CharsetMatch are now deprecated and scheduled for removal in v3.0\n\n### Fixed\n- The CLI output used the relative path of the file(s). Should be absolute.\n\n## [1.4.1](https://github.com/Ousret/charset_normalizer/compare/1.4.0...1.4.1) (2021-05-28)\n### Fixed\n- Logger configuration/usage no longer conflict with others (PR #44)\n\n## [1.4.0](https://github.com/Ousret/charset_normalizer/compare/1.3.9...1.4.0) (2021-05-21)\n### Removed\n- Using standard logging instead of using the package loguru.\n- Dropping nose test framework in favor of the maintained pytest.\n- Choose to not use dragonmapper package to help with gibberish Chinese/CJK text.\n- Require cached_property only for Python 3.5 due to constraint. Dropping for every other interpreter version.\n- Stop support for UTF-7 that does not contain a SIG.\n- Dropping PrettyTable, replaced with pure JSON output in CLI.\n\n### Fixed\n- BOM marker in a CharsetNormalizerMatch instance could be False in rare cases even if obviously present. Due to the sub-match factoring process.\n- Not searching properly for the BOM when trying utf32/16 parent codec.\n\n### Changed\n- Improving the package final size by compressing frequencies.json.\n- Huge improvement over the larges payload.\n\n### Added\n- CLI now produces JSON consumable output.\n- Return ASCII if given sequences fit. Given reasonable confidence.\n\n## [1.3.9](https://github.com/Ousret/charset_normalizer/compare/1.3.8...1.3.9) (2021-05-13)\n\n### Fixed\n- In some very rare cases, you may end up getting encode/decode errors due to a bad bytes payload (PR #40)\n\n## [1.3.8](https://github.com/Ousret/charset_normalizer/compare/1.3.7...1.3.8) (2021-05-12)\n\n### Fixed\n- Empty given payload for detection may cause an exception if trying to access the `alphabets` property. (PR #39)\n\n## [1.3.7](https://github.com/Ousret/charset_normalizer/compare/1.3.6...1.3.7) (2021-05-12)\n\n### Fixed\n- The legacy detect function should return UTF-8-SIG if sig is present in the payload. (PR #38)\n\n## [1.3.6](https://github.com/Ousret/charset_normalizer/compare/1.3.5...1.3.6) (2021-02-09)\n\n### Changed\n- Amend the previous release to allow prettytable 2.0 (PR #35)\n\n## [1.3.5](https://github.com/Ousret/charset_normalizer/compare/1.3.4...1.3.5) (2021-02-08)\n\n### Fixed\n- Fix error while using the package with a python pre-release interpreter (PR #33)\n\n### Changed\n- Dependencies refactoring, constraints revised.\n\n### Added\n- Add python 3.9 and 3.10 to the supported interpreters\n\nMIT License\n\nCopyright (c) 2019 TAHRI Ahmed R.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "encoding",
          "charset",
          "charset-detector",
          "detector",
          "normalization",
          "unicode",
          "chardet",
          "detect"
        ],
        "home_page": "https://github.com/Ousret/charset_normalizer",
        "author": "Ahmed TAHRI",
        "author_email": "ahmed.tahri@cloudnursery.dev",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "License :: OSI Approved :: MIT License",
          "Intended Audience :: Developers",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Text Processing :: Linguistic",
          "Topic :: Utilities",
          "Typing :: Typed"
        ],
        "requires_python": ">=3.7.0",
        "project_url": [
          "Bug Reports, https://github.com/Ousret/charset_normalizer/issues",
          "Documentation, https://charset-normalizer.readthedocs.io/en/latest"
        ],
        "provides_extra": [
          "unicode_backport"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/fc/34/3030de6f1370931b9dbb4dad48f6ab1015ab1d32447850b9fc94e60097be/idna-3.4-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2",
          "hashes": {
            "sha256": "90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "idna",
        "version": "3.4",
        "summary": "Internationalized Domain Names in Applications (IDNA)",
        "description": "Internationalized Domain Names in Applications (IDNA)\n=====================================================\n\nSupport for the Internationalized Domain Names in\nApplications (IDNA) protocol as specified in `RFC 5891\n<https://tools.ietf.org/html/rfc5891>`_. This is the latest version of\nthe protocol and is sometimes referred to as “IDNA 2008”.\n\nThis library also provides support for Unicode Technical\nStandard 46, `Unicode IDNA Compatibility Processing\n<https://unicode.org/reports/tr46/>`_.\n\nThis acts as a suitable replacement for the “encodings.idna”\nmodule that comes with the Python standard library, but which\nonly supports the older superseded IDNA specification (`RFC 3490\n<https://tools.ietf.org/html/rfc3490>`_).\n\nBasic functions are simply executed:\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    ドメイン.テスト\n\n\nInstallation\n------------\n\nThis package is available for installation from PyPI:\n\n.. code-block:: bash\n\n    $ python3 -m pip install idna\n\n\nUsage\n-----\n\nFor typical usage, the ``encode`` and ``decode`` functions will take a\ndomain name argument and perform a conversion to A-labels or U-labels\nrespectively.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    ドメイン.テスト\n\nYou may use the codec encoding and decoding methods using the\n``idna.codec`` module:\n\n.. code-block:: pycon\n\n    >>> import idna.codec\n    >>> print('домен.испытание'.encode('idna'))\n    b'xn--d1acufc.xn--80akhbyknj4f'\n    >>> print(b'xn--d1acufc.xn--80akhbyknj4f'.decode('idna'))\n    домен.испытание\n\nConversions can be applied at a per-label basis using the ``ulabel`` or\n``alabel`` functions if necessary:\n\n.. code-block:: pycon\n\n    >>> idna.alabel('测试')\n    b'xn--0zwm56d'\n\nCompatibility Mapping (UTS #46)\n+++++++++++++++++++++++++++++++\n\nAs described in `RFC 5895 <https://tools.ietf.org/html/rfc5895>`_, the\nIDNA specification does not normalize input from different potential\nways a user may input a domain name. This functionality, known as\na “mapping”, is considered by the specification to be a local\nuser-interface issue distinct from IDNA conversion functionality.\n\nThis library provides one such mapping, that was developed by the\nUnicode Consortium. Known as `Unicode IDNA Compatibility Processing\n<https://unicode.org/reports/tr46/>`_, it provides for both a regular\nmapping for typical applications, as well as a transitional mapping to\nhelp migrate from older IDNA 2003 applications.\n\nFor example, “Königsgäßchen” is not a permissible label as *LATIN\nCAPITAL LETTER K* is not allowed (nor are capital letters in general).\nUTS 46 will convert this into lower case prior to applying the IDNA\nconversion.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('Königsgäßchen')\n    ...\n    idna.core.InvalidCodepoint: Codepoint U+004B at position 1 of 'Königsgäßchen' not allowed\n    >>> idna.encode('Königsgäßchen', uts46=True)\n    b'xn--knigsgchen-b4a3dun'\n    >>> print(idna.decode('xn--knigsgchen-b4a3dun'))\n    königsgäßchen\n\nTransitional processing provides conversions to help transition from\nthe older 2003 standard to the current standard. For example, in the\noriginal IDNA specification, the *LATIN SMALL LETTER SHARP S* (ß) was\nconverted into two *LATIN SMALL LETTER S* (ss), whereas in the current\nIDNA specification this conversion is not performed.\n\n.. code-block:: pycon\n\n    >>> idna.encode('Königsgäßchen', uts46=True, transitional=True)\n    'xn--knigsgsschen-lcb0w'\n\nImplementors should use transitional processing with caution, only in\nrare cases where conversion from legacy labels to current labels must be\nperformed (i.e. IDNA implementations that pre-date 2008). For typical\napplications that just need to convert labels, transitional processing\nis unlikely to be beneficial and could produce unexpected incompatible\nresults.\n\n``encodings.idna`` Compatibility\n++++++++++++++++++++++++++++++++\n\nFunction calls from the Python built-in ``encodings.idna`` module are\nmapped to their IDNA 2008 equivalents using the ``idna.compat`` module.\nSimply substitute the ``import`` clause in your code to refer to the new\nmodule name.\n\nExceptions\n----------\n\nAll errors raised during the conversion following the specification\nshould raise an exception derived from the ``idna.IDNAError`` base\nclass.\n\nMore specific exceptions that may be generated as ``idna.IDNABidiError``\nwhen the error reflects an illegal combination of left-to-right and\nright-to-left characters in a label; ``idna.InvalidCodepoint`` when\na specific codepoint is an illegal character in an IDN label (i.e.\nINVALID); and ``idna.InvalidCodepointContext`` when the codepoint is\nillegal based on its positional context (i.e. it is CONTEXTO or CONTEXTJ\nbut the contextual requirements are not satisfied.)\n\nBuilding and Diagnostics\n------------------------\n\nThe IDNA and UTS 46 functionality relies upon pre-calculated lookup\ntables for performance. These tables are derived from computing against\neligibility criteria in the respective standards. These tables are\ncomputed using the command-line script ``tools/idna-data``.\n\nThis tool will fetch relevant codepoint data from the Unicode repository\nand perform the required calculations to identify eligibility. There are\nthree main modes:\n\n* ``idna-data make-libdata``. Generates ``idnadata.py`` and\n  ``uts46data.py``, the pre-calculated lookup tables using for IDNA and\n  UTS 46 conversions. Implementors who wish to track this library against\n  a different Unicode version may use this tool to manually generate a\n  different version of the ``idnadata.py`` and ``uts46data.py`` files.\n\n* ``idna-data make-table``. Generate a table of the IDNA disposition\n  (e.g. PVALID, CONTEXTJ, CONTEXTO) in the format found in Appendix\n  B.1 of RFC 5892 and the pre-computed tables published by `IANA\n  <https://www.iana.org/>`_.\n\n* ``idna-data U+0061``. Prints debugging output on the various\n  properties associated with an individual Unicode codepoint (in this\n  case, U+0061), that are used to assess the IDNA and UTS 46 status of a\n  codepoint. This is helpful in debugging or analysis.\n\nThe tool accepts a number of arguments, described using ``idna-data\n-h``. Most notably, the ``--version`` argument allows the specification\nof the version of Unicode to use in computing the table data. For\nexample, ``idna-data --version 9.0.0 make-libdata`` will generate\nlibrary data against Unicode 9.0.0.\n\n\nAdditional Notes\n----------------\n\n* **Packages**. The latest tagged release version is published in the\n  `Python Package Index <https://pypi.org/project/idna/>`_.\n\n* **Version support**. This library supports Python 3.5 and higher.\n  As this library serves as a low-level toolkit for a variety of\n  applications, many of which strive for broad compatibility with older\n  Python versions, there is no rush to remove older intepreter support.\n  Removing support for older versions should be well justified in that the\n  maintenance burden has become too high.\n\n* **Python 2**. Python 2 is supported by version 2.x of this library.\n  While active development of the version 2.x series has ended, notable\n  issues being corrected may be backported to 2.x. Use \"idna<3\" in your\n  requirements file if you need this library for a Python 2 application.\n\n* **Testing**. The library has a test suite based on each rule of the\n  IDNA specification, as well as tests that are provided as part of the\n  Unicode Technical Standard 46, `Unicode IDNA Compatibility Processing\n  <https://unicode.org/reports/tr46/>`_.\n\n* **Emoji**. It is an occasional request to support emoji domains in\n  this library. Encoding of symbols like emoji is expressly prohibited by\n  the technical standard IDNA 2008 and emoji domains are broadly phased\n  out across the domain industry due to associated security risks. For\n  now, applications that wish need to support these non-compliant labels\n  may wish to consider trying the encode/decode operation in this library\n  first, and then falling back to using `encodings.idna`. See `the Github\n  project <https://github.com/kjd/idna/issues/18>`_ for more discussion.\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Kim Davies <kim@cynosure.com.au>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: Name Service (DNS)",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Utilities"
        ],
        "requires_python": ">=3.5",
        "project_url": [
          "Changelog, https://github.com/kjd/idna/blob/master/HISTORY.rst",
          "Issue tracker, https://github.com/kjd/idna/issues",
          "Source, https://github.com/kjd/idna"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/fe/21/2eff1de472ca6c99ec3993eab11308787b9879af9ca8bbceb4868cf4f2ca/MarkupSafe-2.1.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2",
          "hashes": {
            "sha256": "bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "MarkupSafe",
        "version": "2.1.3",
        "summary": "Safely add untrusted strings to HTML/XML markup.",
        "description": "MarkupSafe\n==========\n\nMarkupSafe implements a text object that escapes characters so it is\nsafe to use in HTML and XML. Characters that have special meanings are\nreplaced so that they display as the actual characters. This mitigates\ninjection attacks, meaning untrusted user input can safely be displayed\non a page.\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    pip install -U MarkupSafe\n\n.. _pip: https://pip.pypa.io/en/stable/getting-started/\n\n\nExamples\n--------\n\n.. code-block:: pycon\n\n    >>> from markupsafe import Markup, escape\n\n    >>> # escape replaces special characters and wraps in Markup\n    >>> escape(\"<script>alert(document.cookie);</script>\")\n    Markup('&lt;script&gt;alert(document.cookie);&lt;/script&gt;')\n\n    >>> # wrap in Markup to mark text \"safe\" and prevent escaping\n    >>> Markup(\"<strong>Hello</strong>\")\n    Markup('<strong>hello</strong>')\n\n    >>> escape(Markup(\"<strong>Hello</strong>\"))\n    Markup('<strong>hello</strong>')\n\n    >>> # Markup is a str subclass\n    >>> # methods and operators escape their arguments\n    >>> template = Markup(\"Hello <em>{name}</em>\")\n    >>> template.format(name='\"World\"')\n    Markup('Hello <em>&#34;World&#34;</em>')\n\n\nDonate\n------\n\nThe Pallets organization develops and supports MarkupSafe and other\npopular packages. In order to grow the community of contributors and\nusers, and allow the maintainers to devote more time to the projects,\n`please donate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nLinks\n-----\n\n-   Documentation: https://markupsafe.palletsprojects.com/\n-   Changes: https://markupsafe.palletsprojects.com/changes/\n-   PyPI Releases: https://pypi.org/project/MarkupSafe/\n-   Source Code: https://github.com/pallets/markupsafe/\n-   Issue Tracker: https://github.com/pallets/markupsafe/issues/\n-   Chat: https://discord.gg/pallets\n",
        "description_content_type": "text/x-rst",
        "home_page": "https://palletsprojects.com/p/markupsafe/",
        "maintainer": "Pallets",
        "maintainer_email": "contact@palletsprojects.com",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
          "Topic :: Text Processing :: Markup :: HTML"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Donate, https://palletsprojects.com/donate",
          "Documentation, https://markupsafe.palletsprojects.com/",
          "Changes, https://markupsafe.palletsprojects.com/changes/",
          "Source Code, https://github.com/pallets/markupsafe/",
          "Issue Tracker, https://github.com/pallets/markupsafe/issues/",
          "Chat, https://discord.gg/pallets"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/9b/81/62fd61001fa4b9d0df6e31d47ff49cfa9de4af03adecf339c7bc30656b37/urllib3-2.0.4-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=de7df1803967d2c2a98e4b11bb7d6bd9210474c46e8a0401514e3a42a75ebde4",
          "hashes": {
            "sha256": "de7df1803967d2c2a98e4b11bb7d6bd9210474c46e8a0401514e3a42a75ebde4"
          }
        }
      },
      "is_direct": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "urllib3",
        "version": "2.0.4",
        "summary": "HTTP library with thread-safe connection pooling, file post, and more.",
        "description": "<h1 align=\"center\">\n\n![urllib3](https://github.com/urllib3/urllib3/raw/main/docs/_static/banner_github.svg)\n\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://pypi.org/project/urllib3\"><img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/urllib3.svg?maxAge=86400\" /></a>\n  <a href=\"https://pypi.org/project/urllib3\"><img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/urllib3.svg?maxAge=86400\" /></a>\n  <a href=\"https://discord.gg/urllib3\"><img alt=\"Join our Discord\" src=\"https://img.shields.io/discord/756342717725933608?color=%237289da&label=discord\" /></a>\n  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img alt=\"Coverage Status\" src=\"https://img.shields.io/badge/coverage-100%25-success\" /></a>\n  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img alt=\"Build Status on GitHub\" src=\"https://github.com/urllib3/urllib3/workflows/CI/badge.svg\" /></a>\n  <a href=\"https://urllib3.readthedocs.io\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/urllib3/badge/?version=latest\" /></a><br>\n  <a href=\"https://deps.dev/pypi/urllib3\"><img alt=\"OpenSSF Scorecard\" src=\"https://api.securityscorecards.dev/projects/github.com/urllib3/urllib3/badge\" /></a>\n  <a href=\"https://slsa.dev\"><img alt=\"SLSA 3\" src=\"https://slsa.dev/images/gh-badge-level3.svg\" /></a>\n  <a href=\"https://bestpractices.coreinfrastructure.org/projects/6227\"><img alt=\"CII Best Practices\" src=\"https://bestpractices.coreinfrastructure.org/projects/6227/badge\" /></a>\n</p>\n\nurllib3 is a powerful, *user-friendly* HTTP client for Python. Much of the\nPython ecosystem already uses urllib3 and you should too.\nurllib3 brings many critical features that are missing from the Python\nstandard libraries:\n\n- Thread safety.\n- Connection pooling.\n- Client-side SSL/TLS verification.\n- File uploads with multipart encoding.\n- Helpers for retrying requests and dealing with HTTP redirects.\n- Support for gzip, deflate, brotli, and zstd encoding.\n- Proxy support for HTTP and SOCKS.\n- 100% test coverage.\n\nurllib3 is powerful and easy to use:\n\n```python3\n>>> import urllib3\n>>> resp = urllib3.request(\"GET\", \"http://httpbin.org/robots.txt\")\n>>> resp.status\n200\n>>> resp.data\nb\"User-agent: *\\nDisallow: /deny\\n\"\n```\n\n## Installing\n\nurllib3 can be installed with [pip](https://pip.pypa.io):\n\n```bash\n$ python -m pip install urllib3\n```\n\nAlternatively, you can grab the latest source code from [GitHub](https://github.com/urllib3/urllib3):\n\n```bash\n$ git clone https://github.com/urllib3/urllib3.git\n$ cd urllib3\n$ pip install .\n```\n\n\n## Documentation\n\nurllib3 has usage and reference documentation at [urllib3.readthedocs.io](https://urllib3.readthedocs.io).\n\n\n## Community\n\nurllib3 has a [community Discord channel](https://discord.gg/urllib3) for asking questions and\ncollaborating with other contributors. Drop by and say hello 👋\n\n\n## Contributing\n\nurllib3 happily accepts contributions. Please see our\n[contributing documentation](https://urllib3.readthedocs.io/en/latest/contributing.html)\nfor some tips on getting started.\n\n\n## Security Disclosures\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure with maintainers.\n\n\n## Maintainers\n\n- [@sethmlarson](https://github.com/sethmlarson) (Seth M. Larson)\n- [@pquentin](https://github.com/pquentin) (Quentin Pradet)\n- [@theacodes](https://github.com/theacodes) (Thea Flowers)\n- [@haikuginger](https://github.com/haikuginger) (Jess Shapiro)\n- [@lukasa](https://github.com/lukasa) (Cory Benfield)\n- [@sigmavirus24](https://github.com/sigmavirus24) (Ian Stapleton Cordasco)\n- [@shazow](https://github.com/shazow) (Andrey Petrov)\n\n👋\n\n\n## Sponsorship\n\nIf your company benefits from this library, please consider [sponsoring its\ndevelopment](https://urllib3.readthedocs.io/en/latest/sponsors.html).\n\n\n## For Enterprise\n\nProfessional support for urllib3 is available as part of the [Tidelift\nSubscription][1].  Tidelift gives software development teams a single source for\npurchasing and maintaining their software, with professional grade assurances\nfrom the experts who know it best, while seamlessly integrating with existing\ntools.\n\n[1]: https://tidelift.com/subscription/pkg/pypi-urllib3?utm_source=pypi-urllib3&utm_medium=referral&utm_campaign=readme\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "filepost",
          "http",
          "httplib",
          "https",
          "pooling",
          "ssl",
          "threadsafe",
          "urllib"
        ],
        "author_email": "Andrey Petrov <andrey.petrov@shazow.net>",
        "maintainer_email": "Seth Michael Larson <sethmichaellarson@gmail.com>, Quentin Pradet <quentin@pradet.me>",
        "classifier": [
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: WWW/HTTP",
          "Topic :: Software Development :: Libraries"
        ],
        "requires_dist": [
          "brotli>=1.0.9; platform_python_implementation == 'CPython' and extra == 'brotli'",
          "brotlicffi>=0.8.0; platform_python_implementation != 'CPython' and extra == 'brotli'",
          "certifi; extra == 'secure'",
          "cryptography>=1.9; extra == 'secure'",
          "idna>=2.0.0; extra == 'secure'",
          "pyopenssl>=17.1.0; extra == 'secure'",
          "urllib3-secure-extra; extra == 'secure'",
          "pysocks!=1.5.7,<2.0,>=1.5.6; extra == 'socks'",
          "zstandard>=0.18.0; extra == 'zstd'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Changelog, https://github.com/urllib3/urllib3/blob/main/CHANGES.rst",
          "Documentation, https://urllib3.readthedocs.io",
          "Code, https://github.com/urllib3/urllib3",
          "Issue tracker, https://github.com/urllib3/urllib3/issues"
        ],
        "provides_extra": [
          "brotli",
          "secure",
          "socks",
          "zstd"
        ]
      }
    }
  ],
  "environment": {
    "implementation_name": "cpython",
    "implementation_version": "3.11.4",
    "os_name": "posix",
    "platform_machine": "x86_64",
    "platform_release": "6.1.0-060100-generic",
    "platform_system": "Linux",
    "platform_version": "#202303090726 SMP PREEMPT_DYNAMIC Thu Mar  9 12:33:28 UTC 2023",
    "python_full_version": "3.11.4",
    "platform_python_implementation": "CPython",
    "python_version": "3.11",
    "sys_platform": "linux"
  }
}